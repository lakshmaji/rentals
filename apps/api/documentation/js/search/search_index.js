var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/entities/Apartment.html",[0,1.64,1,1.397]],["body/entities/Apartment.html",[0,1.76,1,1.798,2,1.402,3,0.192,4,0.192,5,0.167,6,1.982,7,0.246,8,1.033,9,3.118,10,2.3,11,1.945,12,1.334,13,3.563,14,4.239,15,3.118,16,3.118,17,3.118,18,1.239,19,4.239,20,3.315,21,3.118,22,3.118,23,3.118,24,0.874,25,0.029,26,1.65,27,2.09,28,4.644,29,1.234,30,2.358,31,2.358,32,2.205,33,3.118,34,2.358,35,2.344,36,1.982,37,2.971,38,3.534,39,2.358,40,3.095,41,2.971,42,1.917,43,2.358,44,4.708,45,2.358,46,2.358,47,2.358,48,2.358,49,1.76,50,2.358,51,1.586,52,1.982,53,3.534,54,2.358,55,2.358,56,2.358,57,2.358,58,0.392,59,1.735,60,2.971,61,2.971,62,1.279,63,1.55,64,0.192,65,0.118,66,1.499,67,0.015,68,0.015]],["title/controllers/ApartmentController.html",[69,1.115,70,1.958]],["body/controllers/ApartmentController.html",[1,2.188,3,0.133,4,0.133,5,0.116,7,0.171,10,2.799,11,2.489,12,0.67,18,1.4,20,1.077,24,0.808,25,0.029,26,1.643,27,1.622,29,0.957,32,1.224,49,0.816,58,0.421,64,0.133,65,0.134,67,0.011,68,0.011,69,0.555,70,1.582,71,0.644,72,1.206,73,1.206,74,0.901,75,1.996,76,2.842,77,1.748,78,2.66,79,2.087,80,2.822,81,2.66,82,2.66,83,1.378,84,2.485,85,4.252,86,2.8,87,1.639,88,2.236,89,2.236,90,1.639,91,2.236,92,2.236,93,1.639,94,1.639,95,1.929,96,1.929,97,1.622,98,1.639,99,3.247,100,3.247,101,2.842,102,1.639,103,1.639,104,1.639,105,1.206,106,1.639,107,1.639,108,1.639,109,4.456,110,1.639,111,1.639,112,1.639,113,2.791,114,1.639,115,1.639,116,1.748,117,1.639,118,1.639,119,1.639,120,1.639,121,1.639,122,1.639,123,1.639,124,1.639,125,1.957,126,1.748,127,1.378,128,1.206,129,1.378,130,1.378,131,2.236,132,1.206,133,1.206,134,0.354,135,2.236,136,3.824,137,2.236,138,2.236,139,2.236,140,1.957,141,3.247,142,0.975,143,0.816,144,0.975,145,1.378,146,1.671,147,1.206,148,1.206,149,1.077,150,2.539,151,0.889,152,1.378,153,1.378,154,1.378,155,2.842,156,1.378,157,1.378,158,1.378,159,0.975,160,0.516,161,3.525,162,1.378,163,1.4,164,1.378,165,2.236,166,1.378,167,1.408,168,1.378,169,1.378,170,1.378,171,1.378,172,1.378,173,1.378,174,1.378,175,1.378,176,2.265,177,2.236,178,1.957,179,1.671,180,1.378,181,1.957,182,1.378,183,1.582,184,1.443,185,1.378,186,1.206,187,1.378,188,1.378,189,1.378,190,1.378,191,1.378,192,1.378,193,1.378,194,1.378,195,1.378,196,1.378,197,1.378,198,1.378]],["title/modules/ApartmentModule.html",[199,1.511,200,1.958]],["body/modules/ApartmentModule.html",[1,1.656,3,0.318,4,0.318,5,0.276,25,0.029,35,2.503,58,0.576,63,2.567,64,0.318,65,0.196,67,0.021,68,0.021,70,3.306,71,1.975,134,0.844,146,3.095,147,2.873,199,2.306,200,3.697,201,1.944,202,2.727,203,3.283,204,3.283,205,3.304,206,2.567,207,2.567,208,3.905,209,3.698,210,3.905,211,2.873,212,2.119,213,3.283,214,3.283,215,2.567,216,3.905]],["title/classes/ApartmentResp.html",[65,0.165,150,2.164]],["body/classes/ApartmentResp.html",[1,2.038,3,0.134,4,0.134,5,0.117,7,0.172,8,0.781,9,1.967,10,2.715,11,2.372,12,0.674,15,1.967,16,1.967,17,1.967,18,1.133,20,1.084,21,1.967,22,1.967,23,1.967,24,0.82,25,0.029,26,1.552,27,1.798,29,1.061,32,1.663,49,0.821,58,0.422,64,0.134,65,0.134,67,0.011,68,0.011,69,0.558,70,0.981,72,1.213,75,0.981,76,1.213,79,1.227,80,1.386,84,2.882,85,3.681,86,2.121,88,1.386,89,1.386,91,1.386,92,1.386,99,2.247,100,2.247,101,1.967,109,4.038,113,2.216,125,1.967,126,1.757,127,1.386,128,1.213,129,1.386,130,1.386,131,2.247,132,1.213,133,1.213,134,0.357,135,2.247,136,3.835,137,2.247,138,2.247,139,2.247,140,2.48,141,3.259,142,0.981,143,0.821,144,0.981,145,1.386,146,1.678,147,1.213,148,1.213,149,1.084,150,2.8,151,1.45,152,1.386,153,1.386,154,1.386,155,2.852,156,1.386,157,1.386,158,1.386,159,0.981,160,1.892,161,3.534,162,1.386,163,1.404,164,1.386,165,2.247,166,1.386,167,1.413,168,1.386,169,1.386,170,1.386,171,1.386,172,1.386,173,1.386,174,1.386,175,1.386,176,2.271,177,2.247,178,1.967,179,1.678,180,1.386,181,1.967,182,1.386,183,1.59,184,1.45,185,1.386,186,1.213,187,1.386,188,1.386,189,1.386,190,1.386,191,1.386,192,1.386,193,1.386,194,1.386,195,1.386,196,1.386,197,1.386,198,1.386,217,0.895,218,1.649,219,4.038,220,3.681,221,1.386,222,5.17,223,1.649,224,1.386,225,1.649,226,1.386,227,1.649,228,1.386,229,1.649,230,2.247,231,1.386,232,1.386,233,1.649,234,1.386,235,1.386,236,1.386,237,1.386,238,1.386,239,1.386,240,1.386,241,1.649,242,1.386,243,1.649,244,1.386,245,1.386,246,1.649,247,1.386,248,1.649]],["title/injectables/ApartmentService.html",[146,1.64,249,0.894]],["body/injectables/ApartmentService.html",[1,2.469,3,0.145,4,0.145,5,0.126,7,0.185,11,1.628,13,1.496,18,1.55,20,2.332,24,0.729,25,0.029,29,1.06,32,2.147,35,1.767,42,1.542,49,1.415,51,1.558,58,0.459,59,1.309,62,0.965,63,1.17,64,0.145,65,0.089,66,0.755,67,0.012,68,0.012,74,0.962,75,1.69,76,2.091,77,1.868,79,2.702,83,2.389,84,2.351,95,2.25,96,2.25,97,1.742,105,2.091,113,2.663,116,2.91,134,0.385,146,1.415,148,1.309,149,1.17,160,0.894,163,1.504,167,2.025,176,2.205,178,3.258,179,2.709,181,2.61,183,1.058,184,0.965,186,1.309,212,0.965,213,1.496,214,1.496,249,0.771,250,0.817,251,1.496,252,2.842,253,2.842,254,2.842,255,2.842,256,2.842,257,1.415,258,1.78,259,4.165,260,3.548,261,1.78,262,2.842,263,1.78,264,2.842,265,1.78,266,2.842,267,3.406,268,1.78,269,1.496,270,3.548,271,2.842,272,1.78,273,2.842,274,1.78,275,1.78,276,2.842,277,1.78,278,2.842,279,4.051,280,1.78,281,1.496,282,1.78,283,1.542,284,1.78,285,1.78,286,3.548,287,1.78,288,1.78,289,1.78,290,4.051,291,1.78,292,1.78,293,1.78,294,1.496,295,1.78,296,1.78,297,1.78,298,1.78,299,1.78,300,1.78,301,1.78,302,1.78,303,1.78,304,1.78]],["title/entities/ApartmentUser.html",[0,1.64,35,1.64]],["body/entities/ApartmentUser.html",[0,2.228,1,2.652,2,1.949,3,0.267,4,0.267,5,0.232,7,0.341,8,1.308,11,2.338,12,1.621,24,0.775,25,0.029,27,1.854,28,3.292,29,1.094,32,1.631,33,3.748,35,2.228,40,2.941,41,2.755,49,2.228,51,1.722,52,3.761,58,0.472,59,2.411,60,4.283,62,1.778,64,0.267,65,0.165,66,1.39,67,0.019,68,0.019,167,2.089,294,4.283,305,4.216,306,2.755,307,3.277,308,4.474,309,3.277,310,3.277,311,4.474,312,3.277,313,3.277]],["title/interfaces/AppConfig.html",[314,1.397,315,2.164]],["body/interfaces/AppConfig.html",[3,0.367,4,0.367,5,0.318,7,0.469,8,1.606,24,0.638,25,0.028,32,2.163,64,0.448,66,1.91,67,0.023,68,0.023,314,1.91,315,3.612,316,2.677,317,3.785,318,4.66,319,4.502,320,3.785,321,4.502]],["title/controllers/AppController.html",[69,1.115,322,2.164]],["body/controllers/AppController.html",[3,0.339,4,0.339,5,0.294,7,0.434,12,1.32,25,0.029,26,1.531,27,1.41,29,0.832,58,0.53,64,0.339,65,0.209,67,0.022,68,0.022,69,1.773,71,1.637,74,1.773,97,1.41,134,0.901,159,2.477,160,1.31,163,1.217,322,3.443,323,3.502,324,5.053,325,4.166,326,4.166,327,3.108,328,3.502,329,4.166,330,4.166]],["title/modules/AppModule.html",[199,1.511,331,2.164]],["body/modules/AppModule.html",[2,1.51,3,0.207,4,0.207,5,0.179,24,0.359,25,0.029,42,2.951,58,0.579,64,0.207,65,0.127,67,0.016,68,0.016,71,1.467,134,0.549,163,0.742,176,1.264,199,1.713,200,3.235,201,1.264,202,2.026,205,2.454,206,1.669,207,1.669,209,2.746,211,1.868,212,1.377,215,2.91,220,1.868,315,2.454,318,2.746,322,2.91,327,2.951,328,2.134,331,4.037,332,2.134,333,2.134,334,2.134,335,3.235,336,3.235,337,2.539,338,3.138,339,3.733,340,3.257,341,1.377,342,2.539,343,2.539,344,2.91,345,2.539,346,2.454,347,2.539,348,2.539,349,3.733,350,1.868,351,2.22,352,2.539,353,2.134,354,2.539,355,2.539,356,2.539,357,2.539,358,2.539,359,2.539,360,2.539,361,2.539,362,2.539,363,2.539,364,2.539,365,4.882,366,2.539,367,2.746,368,2.539,369,2.539,370,2.539,371,2.539,372,2.539,373,2.539,374,2.539,375,2.539,376,2.539,377,2.539,378,2.539,379,2.539,380,2.134,381,1.868,382,2.539,383,2.539,384,2.539,385,2.539,386,2.539,387,2.134,388,2.539,389,2.539,390,1.868,391,2.539,392,1.264,393,2.539,394,2.539,395,2.539,396,1.669,397,2.539]],["title/injectables/AppService.html",[249,0.894,327,1.787]],["body/injectables/AppService.html",[3,0.365,4,0.365,5,0.317,7,0.467,25,0.028,26,1.602,29,0.896,58,0.415,64,0.365,65,0.225,67,0.023,68,0.023,74,1.856,97,1.518,134,0.969,163,1.31,249,1.488,250,2.057,324,5.185,327,2.974,398,3.769,399,4.483,400,4.483,401,4.483]],["title/interfaces/AuthConfig.html",[314,1.397,346,2.164]],["body/interfaces/AuthConfig.html",[3,0.338,4,0.338,5,0.293,7,0.432,8,1.527,24,0.74,25,0.029,26,1.846,32,2.085,58,0.384,64,0.425,66,1.76,67,0.022,68,0.022,314,1.76,316,2.468,341,2.251,346,3.434,402,3.488,403,6.187,404,5.201,405,3.488,406,4.15,407,4.15,408,4.15]],["title/controllers/AuthController.html",[69,1.115,409,2.164]],["body/controllers/AuthController.html",[3,0.26,4,0.26,5,0.225,7,0.332,12,1.265,18,1.283,24,0.622,25,0.029,27,1.487,29,0.877,51,1.003,58,0.556,64,0.26,65,0.16,67,0.019,68,0.019,69,1.487,71,1.253,74,1.487,79,2.305,95,1.862,96,1.862,97,1.487,125,2.345,126,3.731,132,2.345,133,2.345,134,0.689,142,1.896,143,1.587,144,1.896,160,1.003,161,3.23,163,1.283,179,1.587,283,3.261,396,2.095,409,2.886,410,2.68,411,3.691,412,3.691,413,2.68,414,3.218,415,3.188,416,3.188,417,3.982,418,2.68,419,3.218,420,3.188,421,3.188,422,2.725,423,2.68,424,2.68,425,2.68,426,1.73,427,3.188,428,3.188,429,3.188,430,3.188,431,3.188,432,3.188,433,3.188,434,3.188]],["title/injectables/AuthHelper.html",[249,0.894,435,1.787]],["body/injectables/AuthHelper.html",[3,0.235,4,0.235,5,0.204,7,0.3,8,1.196,11,1.323,12,1.531,18,1.514,24,0.775,25,0.029,26,1.868,29,1.093,40,2.691,51,1.629,58,0.48,64,0.235,65,0.145,67,0.017,68,0.017,74,1.386,95,2.197,96,2.197,97,1.611,134,0.624,160,1.497,163,1.391,167,1.051,176,1.436,249,1.111,250,1.323,257,1.436,283,2.582,392,2.038,426,1.565,435,2.221,436,2.425,437,3.253,438,4.094,439,4.094,440,3.442,441,4.094,442,5.683,443,4.094,444,4.094,445,2.884,446,4.094,447,2.884,448,4.094,449,5.181,450,2.884,451,2.122,452,3.442,453,2.884,454,4.094,455,2.884,456,2.884,457,2.884,458,2.884,459,1.565,460,2.425,461,2.884]],["title/injectables/AuthService.html",[249,0.894,422,1.787]],["body/injectables/AuthService.html",[3,0.205,4,0.205,5,0.178,7,0.262,12,1.366,18,1.514,24,0.624,25,0.029,29,0.88,40,1.653,51,1.529,58,0.502,64,0.205,65,0.126,67,0.016,68,0.016,74,1.255,79,2.488,95,1.868,96,1.868,97,1.255,126,3.194,134,0.544,160,1.166,163,1.083,167,2.044,176,2.58,179,2.192,183,2.619,184,2.811,249,1.006,250,1.154,257,1.846,283,2.011,392,2.192,411,3.116,412,3.116,413,3.116,414,3.081,417,3.575,418,3.116,419,3.081,422,2.011,424,2.114,425,2.114,426,1.364,435,2.637,440,3.116,459,2.389,460,2.114,462,2.114,463,2.515,464,2.699,465,4.403,466,2.515,467,2.515,468,2.515,469,2.515,470,2.515,471,2.114,472,2.114,473,1.85,474,3.707,475,2.515,476,2.515,477,2.515,478,3.707,479,2.515,480,2.515,481,3.707,482,3.707,483,3.707,484,2.515,485,2.515,486,2.114,487,2.114,488,3.707,489,2.515]],["title/classes/CreateApartmentDto.html",[65,0.165,84,1.64]],["body/classes/CreateApartmentDto.html",[3,0.181,4,0.181,5,0.157,7,0.232,8,0.988,9,3.363,10,2.48,15,3.363,16,3.363,17,3.01,18,1.513,21,3.363,22,3.01,23,3.363,24,0.805,25,0.028,26,1.621,27,1.924,29,1.135,32,2.112,58,0.313,64,0.181,65,0.17,67,0.014,68,0.014,84,1.684,140,4.263,143,1.107,160,2.053,217,1.207,219,4.525,220,4.568,221,1.87,224,1.87,226,1.87,228,1.87,230,2.843,231,2.843,232,2.843,234,2.843,235,2.843,236,1.87,237,4.951,238,2.843,239,2.843,240,2.843,242,1.87,244,2.843,245,2.843,247,1.87,490,4.871,491,1.636,492,2.224,493,2.224,494,2.224,495,2.224,496,2.224,497,2.224,498,2.224,499,2.224,500,2.224,501,5.794,502,5.179,503,3.617,504,2.224,505,2.224,506,1.462,507,2.224,508,2.224]],["title/interfaces/DatabaseConfig.html",[314,1.397,344,2.164]],["body/interfaces/DatabaseConfig.html",[3,0.302,4,0.302,5,0.262,7,0.387,8,1.422,24,0.846,25,0.028,26,1.917,32,1.978,58,0.344,64,0.396,66,1.575,67,0.021,68,0.021,314,1.575,316,2.208,318,4.397,320,3.122,341,2.015,344,3.198,367,4.397,387,5.025,390,4.397,392,2.976,405,3.122,509,3.122,510,3.713,511,3.713,512,3.713,513,3.713,514,3.713,515,3.713,516,3.713]],["title/controllers/HealthController.html",[69,1.115,517,2.164]],["body/controllers/HealthController.html",[3,0.285,4,0.285,5,0.248,7,0.365,12,1.328,25,0.029,27,1.585,29,0.936,58,0.521,64,0.285,65,0.176,67,0.02,68,0.02,69,1.186,71,1.377,73,2.578,74,1.585,97,1.585,134,0.758,142,2.084,143,1.745,144,2.084,155,2.578,160,1.658,163,1.368,257,1.745,283,2.861,367,4.14,517,3.077,518,2.946,519,4.682,520,4.93,521,3.504,522,3.504,523,3.504,524,3.504,525,4.682,526,4.682,527,5.273,528,4.682,529,2.578,530,3.504,531,3.504,532,3.504,533,3.504,534,3.504,535,4.682,536,3.504,537,3.504,538,3.504,539,3.504]],["title/modules/HealthModule.html",[199,1.511,335,1.958]],["body/modules/HealthModule.html",[3,0.359,4,0.359,5,0.312,25,0.029,58,0.568,64,0.359,65,0.221,67,0.023,68,0.023,71,2.132,134,0.953,199,2.49,201,2.195,215,2.898,335,3.226,517,3.863,529,3.243,540,4.409,541,5.426,542,4.409,543,5.426,544,3.706]],["title/injectables/JwtAuthGuard.html",[249,0.894,351,1.958]],["body/injectables/JwtAuthGuard.html",[3,0.322,4,0.224,5,0.194,7,0.286,12,1.409,18,1.354,24,0.718,25,0.029,29,0.926,42,2.147,49,1.369,51,1.759,58,0.497,64,0.224,65,0.138,67,0.017,68,0.017,74,1.339,79,2.127,86,1.97,95,2.15,96,1.966,97,1.339,116,2.6,134,0.595,144,1.635,151,1.492,159,1.635,163,1.354,167,2.101,176,1.97,179,1.369,183,2.353,184,1.492,249,1.074,250,1.262,257,1.369,350,2.023,351,2.353,471,3.326,545,4.261,546,2.311,547,3.956,548,3.956,549,2.749,550,5.593,551,2.749,552,3.956,553,5.069,554,2.749,555,2.749,556,3.956,557,2.749,558,5.069,559,2.749,560,3.956,561,1.807,562,2.023,563,2.311,564,2.749,565,2.749,566,2.311,567,3.326,568,2.749,569,2.749,570,2.749,571,2.749,572,2.749,573,2.749,574,2.749,575,2.749,576,2.749,577,2.749,578,2.749,579,2.749,580,2.749,581,2.749,582,2.749,583,2.749,584,2.749,585,2.749]],["title/injectables/JwtStrategy.html",[249,0.894,586,1.958]],["body/injectables/JwtStrategy.html",[3,0.294,4,0.294,5,0.255,7,0.376,18,1.396,24,0.676,25,0.029,29,0.955,49,1.798,58,0.527,64,0.294,65,0.181,67,0.02,68,0.02,74,1.617,79,2.456,95,2.026,96,2.026,97,1.223,113,2.374,116,2.374,134,0.781,151,1.96,163,1.056,249,1.297,250,1.657,257,1.798,340,4.19,341,1.96,381,3.514,390,2.657,396,2.374,437,2.148,561,2.374,566,3.036,586,2.841,587,3.036,588,4.777,589,3.612,590,3.612,591,4.777,592,3.612,593,3.612,594,3.612,595,3.612,596,3.036,597,3.612,598,3.612,599,3.612,600,3.612,601,3.612,602,3.612,603,3.612,604,3.036,605,3.612,606,3.612]],["title/classes/LoginDto.html",[65,0.165,414,1.958]],["body/classes/LoginDto.html",[3,0.331,4,0.331,5,0.288,7,0.424,8,1.508,12,1.583,24,0.731,25,0.028,26,1.742,27,1.747,29,1.031,58,0.377,64,0.331,65,0.259,67,0.022,68,0.022,160,1.977,217,2.208,392,2.822,414,3.069,459,3.075,503,4.17,506,2.675,607,3.421,608,4.765,609,4.07,610,4.07]],["title/classes/RegisterDto.html",[65,0.165,419,1.958]],["body/classes/RegisterDto.html",[3,0.313,4,0.313,5,0.272,7,0.401,8,1.455,12,1.626,18,1.613,24,0.782,25,0.028,26,1.81,27,1.686,29,1.103,58,0.356,64,0.313,65,0.25,67,0.021,68,0.021,160,2.03,217,2.088,392,2.748,419,2.961,459,2.995,503,4.061,506,2.529,608,4.64,611,3.235,612,3.848,613,3.848,614,3.848]],["title/classes/UpdateApartmentDto.html",[65,0.165,615,2.423]],["body/classes/UpdateApartmentDto.html",[3,0.381,4,0.381,5,0.331,25,0.028,58,0.521,64,0.381,65,0.235,67,0.024,68,0.024,75,2.784,84,2.331,149,3.077,151,2.54,217,2.54,491,3.444,615,4.14,616,3.935,617,4.681,618,3.935,619,3.935,620,4.681]],["title/interfaces/UserContext.html",[86,1.64,314,1.397]],["body/interfaces/UserContext.html",[3,0.359,4,0.359,5,0.312,7,0.459,8,1.586,24,0.624,25,0.028,51,1.929,58,0.502,64,0.359,66,1.87,67,0.023,68,0.023,86,2.926,151,2.944,167,2.236,314,1.87,316,2.622,426,2.392,621,3.706,622,5.877,623,3.706]],["title/controllers/UserController.html",[69,1.115,624,2.164]],["body/controllers/UserController.html",[3,0.312,4,0.312,5,0.271,7,0.399,18,1.121,24,0.543,25,0.029,27,1.298,29,0.766,58,0.559,64,0.312,65,0.192,67,0.021,68,0.021,69,1.298,71,1.507,73,2.821,74,1.682,77,3.265,85,4.054,86,2.902,95,1.626,96,1.626,97,1.298,128,2.821,134,0.829,142,2.28,143,1.909,159,2.28,160,1.206,163,1.121,167,1.398,351,2.28,353,3.223,437,2.28,464,2.744,473,2.821,563,3.223,624,3.265,625,3.223,626,3.834,627,3.834,628,3.834,629,3.834,630,3.834,631,3.834,632,3.834,633,3.834]],["title/entities/UserEntity.html",[0,1.64,51,1.036]],["body/entities/UserEntity.html",[0,1.985,1,2.381,2,1.652,3,0.226,4,0.226,5,0.196,7,0.289,8,1.165,11,2.139,12,1.517,18,1.488,24,0.838,25,0.029,26,1.64,27,1.957,28,4.129,29,1.155,32,1.453,33,3.43,35,2.536,36,3.351,37,3.351,42,2.763,51,1.254,58,0.471,61,3.919,62,1.507,63,1.826,64,0.226,65,0.2,66,1.691,67,0.017,68,0.017,101,3.43,267,3.919,305,2.044,392,2.321,459,2.529,486,3.919,487,3.351,634,2.336,635,4.662,636,3.986,637,2.778,638,2.778,639,2.778,640,2.778,641,3.986,642,2.778,643,2.778,644,3.986,645,3.986,646,2.778,647,2.778,648,2.778,649,2.778,650,2.778,651,3.986,652,2.336,653,2.778,654,2.778,655,2.778]],["title/modules/UserModule.html",[199,1.511,336,1.958]],["body/modules/UserModule.html",[3,0.246,4,0.246,5,0.214,25,0.029,51,0.951,58,0.588,64,0.246,65,0.152,67,0.018,68,0.018,71,1.663,134,0.654,167,1.102,199,1.942,201,1.506,202,2.297,205,2.782,206,1.988,207,1.988,209,3.114,211,2.225,212,1.641,215,1.988,336,3.775,340,3.593,341,1.641,380,2.542,381,2.225,396,1.988,404,2.542,409,3.21,422,3.131,423,2.542,426,1.641,435,3.131,437,1.798,451,2.225,464,2.873,472,2.542,473,2.225,561,1.988,586,3.432,604,2.542,624,3.21,656,2.542,657,2.542,658,3.024,659,3.024,660,3.024,661,3.024,662,3.024,663,3.024,664,3.024,665,3.024,666,3.024,667,3.024,668,3.024,669,3.024,670,3.024,671,3.024]],["title/injectables/UserService.html",[249,0.894,464,1.64]],["body/injectables/UserService.html",[3,0.221,4,0.221,5,0.192,7,0.283,11,2.111,12,1.568,18,1.562,24,0.757,25,0.029,26,1.345,29,1.068,32,2.03,51,1.585,58,0.466,62,1.473,64,0.221,65,0.136,67,0.017,68,0.017,74,1.327,75,2.331,77,2.576,79,2.856,95,2.267,96,2.267,97,1.706,105,2.884,134,0.587,160,0.854,163,1.345,167,1.948,179,2.509,212,1.473,249,1.064,250,1.245,257,1.952,259,4.681,281,2.282,283,1.473,417,4.324,426,1.473,459,2.127,464,1.952,672,2.282,673,3.92,674,3.92,675,2.714,676,2.714,677,3.92,678,2.714,679,3.92,680,2.714,681,2.714,682,3.92,683,4.601,684,2.714,685,2.714,686,2.714,687,3.92,688,2.714]],["title/coverage.html",[689,3.303]],["body/coverage.html",[0,2.338,1,1.194,5,0.199,6,2.367,12,0.709,24,0.399,25,0.028,35,1.402,51,0.885,65,0.272,67,0.017,68,0.017,69,1.835,70,1.674,72,2.96,84,1.402,86,1.402,146,1.402,150,1.85,184,1.527,249,1.575,251,2.367,305,2.071,306,2.367,314,2.173,315,1.85,317,2.367,322,1.85,323,2.367,327,1.527,344,1.85,346,1.85,351,1.674,398,2.367,402,2.367,409,1.85,410,2.367,414,1.674,419,1.674,422,1.527,435,1.527,436,2.367,462,2.367,464,1.402,490,2.367,491,2.96,509,2.367,517,1.85,518,2.367,545,2.367,546,2.367,562,2.071,586,1.674,587,2.367,607,2.367,611,2.367,615,2.071,616,2.367,621,2.367,624,1.85,625,2.367,634,2.367,672,2.367,689,2.071,690,2.815,691,2.815,692,2.815,693,6.68,694,2.815,695,2.815,696,4.024,697,5.804,698,5.421,699,5.421,700,4.696,701,2.367,702,2.815,703,2.367,704,3.383,705,4.024,706,4.696,707,2.815,708,2.815]],["title/dependencies.html",[202,2.148,709,2.314]],["body/dependencies.html",[25,0.029,62,2.058,65,0.248,67,0.021,68,0.021,134,0.82,143,1.889,202,2.058,212,2.058,338,3.189,341,2.058,350,2.79,437,2.256,451,2.79,452,3.189,506,2.493,529,2.79,544,3.189,561,2.493,596,4.147,618,3.189,619,3.189,623,4.147,652,3.189,710,3.793,711,5.482,712,3.793,713,3.793,714,3.793,715,3.793,716,3.793,717,3.793,718,3.793,719,3.793,720,3.793,721,3.793,722,3.793,723,3.793,724,3.793,725,3.793,726,3.793,727,3.793,728,3.793,729,3.793,730,3.793,731,3.793,732,3.793,733,3.793,734,3.793,735,3.793,736,3.793,737,3.793]],["title/miscellaneous/functions.html",[738,1.809,739,3.328]],["body/miscellaneous/functions.html",[7,0.527,25,0.025,67,0.025,68,0.025,701,4.255,703,5.241,738,3.327,739,4.255,740,5.062]],["title/index.html",[7,0.287,741,2.752,742,2.752]],["body/index.html",[10,2.208,25,0.029,67,0.022,68,0.022,520,4.339,689,2.994,743,4.07,744,4.07,745,4.07,746,5.161,747,4.07,748,4.07,749,6.46,750,4.07,751,2.994,752,4.07,753,4.07,754,4.07,755,4.07,756,4.07,757,4.07,758,4.07,759,4.07,760,5.161,761,4.07,762,4.07,763,4.07,764,4.07,765,5.161,766,5.161,767,4.07,768,4.07,769,4.07,770,4.07,771,4.07]],["title/modules.html",[201,2.235]],["body/modules.html",[25,0.024,67,0.024,68,0.024,200,2.847,201,2.384,331,3.146,335,2.847,336,2.847,772,6.091,773,6.091,774,6.091,775,6.306,776,4.787,777,4.787]],["title/overview.html",[778,3.774]],["body/overview.html",[2,2.224,25,0.028,67,0.021,68,0.021,71,1.469,146,2.711,200,3.562,201,1.862,202,2.652,203,3.144,204,3.144,205,3.212,206,2.458,207,2.458,217,2.029,250,1.716,316,2.224,327,2.954,331,4.258,332,3.144,333,3.144,334,3.144,335,3.238,336,3.881,422,2.954,435,2.954,464,2.711,586,3.238,656,3.144,657,3.144,778,3.144,779,4.887,780,4.887,781,3.739,782,3.739]],["title/properties.html",[8,1.157,709,2.314]],["body/properties.html",[8,1.458,10,2.707,25,0.028,67,0.025,68,0.025,783,4.99,784,4.99,785,4.99,786,4.99,787,4.99]],["title/miscellaneous/variables.html",[738,1.809,751,2.913]],["body/miscellaneous/variables.html",[7,0.49,12,1.421,24,0.666,25,0.028,26,1.374,42,2.551,66,2.393,67,0.024,68,0.024,269,4.743,562,4.151,567,3.953,704,3.953,738,3.091,751,3.459,788,5.642,789,4.702]]],"invertedIndex":[["",{"_index":25,"title":{},"body":{"entities/Apartment.html":{},"controllers/ApartmentController.html":{},"modules/ApartmentModule.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"entities/ApartmentUser.html":{},"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/AuthConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"classes/CreateApartmentDto.html":{},"interfaces/DatabaseConfig.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateApartmentDto.html":{},"interfaces/UserContext.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":693,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":784,"title":{},"body":{"properties.html":{}}}],["0.0.8",{"_index":710,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":721,"title":{},"body":{"dependencies.html":{}}}],["0.2",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":720,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":723,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":697,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":696,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":695,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":698,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":699,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":706,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":700,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":694,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":320,"title":{},"body":{"interfaces/AppConfig.html":{},"interfaces/DatabaseConfig.html":{}}}],["17.6.0",{"_index":722,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":712,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":239,"title":{},"body":{"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["200",{"_index":99,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["3",{"_index":781,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":779,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":724,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":91,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["403",{"_index":156,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["5",{"_index":780,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":719,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":716,"title":{},"body":{"dependencies.html":{}}}],["5432",{"_index":513,"title":{},"body":{"interfaces/DatabaseConfig.html":{}}}],["6002",{"_index":321,"title":{},"body":{"interfaces/AppConfig.html":{}}}],["7",{"_index":782,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":711,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":713,"title":{},"body":{"dependencies.html":{}}}],["8.0.6",{"_index":717,"title":{},"body":{"dependencies.html":{}}}],["8.1.2",{"_index":718,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":714,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["abortearly",{"_index":373,"title":{},"body":{"modules/AppModule.html":{}}}],["accepted",{"_index":294,"title":{},"body":{"injectables/ApartmentService.html":{},"entities/ApartmentUser.html":{}}}],["add",{"_index":571,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["address",{"_index":9,"title":{},"body":{"entities/Apartment.html":{},"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["address'})@isstring",{"_index":221,"title":{},"body":{"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["allowemptyvalue",{"_index":154,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["allowunknown",{"_index":372,"title":{},"body":{"modules/AppModule.html":{}}}],["already",{"_index":185,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["apartment",{"_index":1,"title":{"entities/Apartment.html":{}},"body":{"entities/Apartment.html":{},"controllers/ApartmentController.html":{},"modules/ApartmentModule.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"entities/ApartmentUser.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["apartment.controller",{"_index":210,"title":{},"body":{"modules/ApartmentModule.html":{}}}],["apartment.dto",{"_index":149,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"classes/UpdateApartmentDto.html":{}}}],["apartment.dto.ts",{"_index":491,"title":{},"body":{"classes/CreateApartmentDto.html":{},"classes/UpdateApartmentDto.html":{},"coverage.html":{}}}],["apartment.dto.ts:20",{"_index":497,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["apartment.dto.ts:27",{"_index":493,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["apartment.dto.ts:34",{"_index":500,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["apartment.dto.ts:41",{"_index":498,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["apartment.dto.ts:48",{"_index":492,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["apartment.dto.ts:55",{"_index":496,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["apartment.dto.ts:62",{"_index":499,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["apartment.dto.ts:69",{"_index":494,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["apartment.dto.ts:76",{"_index":495,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["apartment.entity",{"_index":313,"title":{},"body":{"entities/ApartmentUser.html":{}}}],["apartment.id",{"_index":299,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["apartment.interestedusers",{"_index":308,"title":{},"body":{"entities/ApartmentUser.html":{}}}],["apartment.interestedusers.push(apartmentuser",{"_index":296,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["apartment.occupied",{"_index":303,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["apartment.owner",{"_index":636,"title":{},"body":{"entities/UserEntity.html":{}}}],["apartment.owner.id",{"_index":195,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["apartment.service",{"_index":147,"title":{},"body":{"controllers/ApartmentController.html":{},"modules/ApartmentModule.html":{},"classes/ApartmentResp.html":{}}}],["apartment/apartment.module",{"_index":354,"title":{},"body":{"modules/AppModule.html":{}}}],["apartmentcontroller",{"_index":70,"title":{"controllers/ApartmentController.html":{}},"body":{"controllers/ApartmentController.html":{},"modules/ApartmentModule.html":{},"classes/ApartmentResp.html":{},"coverage.html":{}}}],["apartmentid",{"_index":178,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{}}}],["apartmentinteresteduser",{"_index":181,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{}}}],["apartmentinteresteduser.accepted",{"_index":301,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["apartmentmodule",{"_index":200,"title":{"modules/ApartmentModule.html":{}},"body":{"modules/ApartmentModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apartmentrepository",{"_index":262,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["apartmentresp",{"_index":150,"title":{"classes/ApartmentResp.html":{}},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"coverage.html":{}}}],["apartmentresp})@apibadrequestresponse({status",{"_index":90,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["apartmentresp})@apibody({type",{"_index":102,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["apartmentresp})@apitags('apartment",{"_index":119,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["apartments",{"_index":101,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"entities/UserEntity.html":{}}}],["apartmentservice",{"_index":146,"title":{"injectables/ApartmentService.html":{}},"body":{"controllers/ApartmentController.html":{},"modules/ApartmentModule.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"coverage.html":{},"overview.html":{}}}],["apartmentuser",{"_index":35,"title":{"entities/ApartmentUser.html":{}},"body":{"entities/Apartment.html":{},"modules/ApartmentModule.html":{},"injectables/ApartmentService.html":{},"entities/ApartmentUser.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["apartmentuserrepository",{"_index":260,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["api",{"_index":520,"title":{},"body":{"controllers/HealthController.html":{},"index.html":{}}}],["apibadrequestresponse",{"_index":135,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["apibearerauth",{"_index":136,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["apibody",{"_index":137,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["apicreatedresponse",{"_index":138,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["apiheader",{"_index":139,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["apiproperty",{"_index":140,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["apiproperty()@isnotempty({message",{"_index":219,"title":{},"body":{"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["apiproperty()@isnumber()@isnotempty({message",{"_index":230,"title":{},"body":{"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["apiresponse",{"_index":141,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["apiresponse({status",{"_index":118,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["apitags",{"_index":142,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["apitags('apartment",{"_index":109,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["apitags('apartment')@useinterceptors(classserializerinterceptor)@apibearerauth()@apicreatedresponse({description",{"_index":87,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["apitags('apartment')@useinterceptors(classserializerinterceptor)@get(':id",{"_index":106,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["apitags('auth",{"_index":427,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('health",{"_index":530,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags('user",{"_index":629,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":756,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":342,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":328,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":349,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":315,"title":{"interfaces/AppConfig.html":{}},"body":{"interfaces/AppConfig.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appcontroller",{"_index":322,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application/json",{"_index":153,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["appmodule",{"_index":331,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":327,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arguments",{"_index":585,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["async",{"_index":79,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["auth.controller",{"_index":661,"title":{},"body":{"modules/UserModule.html":{}}}],["auth.guard",{"_index":353,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{}}}],["auth.guard.ts",{"_index":546,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:12",{"_index":551,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:17",{"_index":554,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:36",{"_index":557,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.helper",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{},"modules/UserModule.html":{}}}],["auth.service",{"_index":423,"title":{},"body":{"controllers/AuthController.html":{},"modules/UserModule.html":{}}}],["authconfig",{"_index":346,"title":{"interfaces/AuthConfig.html":{}},"body":{"modules/AppModule.html":{},"interfaces/AuthConfig.html":{},"coverage.html":{}}}],["authcontroller",{"_index":409,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["authentication",{"_index":573,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard",{"_index":559,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":564,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authhelper",{"_index":435,"title":{"injectables/AuthHelper.html":{}},"body":{"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["author",{"_index":787,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":422,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":386,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":777,"title":{},"body":{"modules.html":{}}}],["await",{"_index":179,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/UserService.html":{}}}],["badrequestexception",{"_index":131,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["badrequestexception('you",{"_index":196,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["based",{"_index":584,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["bcrypt",{"_index":452,"title":{},"body":{"injectables/AuthHelper.html":{},"dependencies.html":{}}}],["bcrypt.comparesync(password",{"_index":461,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["bcrypt.gensaltsync(10",{"_index":455,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["bcrypt.hashsync(password",{"_index":456,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["body",{"_index":126,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["boolean",{"_index":40,"title":{},"body":{"entities/Apartment.html":{},"entities/ApartmentUser.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{}}}],["bootstrap",{"_index":703,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":775,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":772,"title":{},"body":{"modules.html":{}}}],["built",{"_index":744,"title":{},"body":{"index.html":{}}}],["cache",{"_index":378,"title":{},"body":{"modules/AppModule.html":{}}}],["call",{"_index":577,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate",{"_index":547,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":552,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["characters",{"_index":240,"title":{},"body":{"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["class",{"_index":65,"title":{"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateApartmentDto.html":{}},"body":{"entities/Apartment.html":{},"controllers/ApartmentController.html":{},"modules/ApartmentModule.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"entities/ApartmentUser.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"classes/CreateApartmentDto.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateApartmentDto.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":217,"title":{},"body":{"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateApartmentDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":132,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"controllers/AuthController.html":{}}}],["cluster_apartmentmodule",{"_index":203,"title":{},"body":{"modules/ApartmentModule.html":{},"overview.html":{}}}],["cluster_apartmentmodule_providers",{"_index":204,"title":{},"body":{"modules/ApartmentModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":332,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":333,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":334,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":656,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":657,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":28,"title":{},"body":{"entities/Apartment.html":{},"entities/ApartmentUser.html":{},"entities/UserEntity.html":{}}}],["column('float",{"_index":44,"title":{},"body":{"entities/Apartment.html":{}}}],["column({default",{"_index":41,"title":{},"body":{"entities/Apartment.html":{},"entities/ApartmentUser.html":{}}}],["column({type",{"_index":643,"title":{},"body":{"entities/UserEntity.html":{}}}],["column({unique",{"_index":638,"title":{},"body":{"entities/UserEntity.html":{}}}],["config",{"_index":381,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{}}}],["config.get('auth.expires",{"_index":671,"title":{},"body":{"modules/UserModule.html":{}}}],["config.get('auth.secret",{"_index":604,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules/UserModule.html":{}}}],["config.get('db",{"_index":383,"title":{},"body":{"modules/AppModule.html":{}}}],["config/app.config",{"_index":343,"title":{},"body":{"modules/AppModule.html":{}}}],["config/auth.config",{"_index":347,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":345,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":339,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":356,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":340,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{}}}],["const",{"_index":176,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"modules/AppModule.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["constructor",{"_index":257,"title":{},"body":{"injectables/ApartmentService.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["constructor(@inject(configservice",{"_index":599,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(apartmentrepository",{"_index":258,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["constructor(config",{"_index":589,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(jwt",{"_index":441,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["constructor(private",{"_index":159,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":549,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["constructor(repository",{"_index":675,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["content",{"_index":152,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["context",{"_index":555,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.getclass",{"_index":570,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":569,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":582,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["controller",{"_index":69,"title":{"controllers/ApartmentController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{}},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('apartment",{"_index":158,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["controller('health",{"_index":531,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('user",{"_index":630,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":71,"title":{},"body":{"controllers/ApartmentController.html":{},"modules/ApartmentModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":689,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cp",{"_index":752,"title":{},"body":{"index.html":{}}}],["create",{"_index":75,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"classes/UpdateApartmentDto.html":{},"injectables/UserService.html":{}}}],["create(createapartmentdto",{"_index":83,"title":{},"body":{"controllers/ApartmentController.html":{},"injectables/ApartmentService.html":{}}}],["create(user",{"_index":677,"title":{},"body":{"injectables/UserService.html":{}}}],["createapartmentdto",{"_index":84,"title":{"classes/CreateApartmentDto.html":{}},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"classes/CreateApartmentDto.html":{},"classes/UpdateApartmentDto.html":{},"coverage.html":{}}}],["createapartmentdto:20",{"_index":241,"title":{},"body":{"classes/ApartmentResp.html":{}}}],["createapartmentdto:27",{"_index":225,"title":{},"body":{"classes/ApartmentResp.html":{}}}],["createapartmentdto:34",{"_index":248,"title":{},"body":{"classes/ApartmentResp.html":{}}}],["createapartmentdto:41",{"_index":243,"title":{},"body":{"classes/ApartmentResp.html":{}}}],["createapartmentdto:48",{"_index":223,"title":{},"body":{"classes/ApartmentResp.html":{}}}],["createapartmentdto:55",{"_index":233,"title":{},"body":{"classes/ApartmentResp.html":{}}}],["createapartmentdto:62",{"_index":246,"title":{},"body":{"classes/ApartmentResp.html":{}}}],["createapartmentdto:69",{"_index":227,"title":{},"body":{"classes/ApartmentResp.html":{}}}],["createapartmentdto:76",{"_index":229,"title":{},"body":{"classes/ApartmentResp.html":{}}}],["created",{"_index":89,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["createinterestforapartment",{"_index":252,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["createinterestforapartment(apartment",{"_index":264,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["custom",{"_index":572,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["database",{"_index":367,"title":{},"body":{"modules/AppModule.html":{},"interfaces/DatabaseConfig.html":{},"controllers/HealthController.html":{}}}],["database_host",{"_index":360,"title":{},"body":{"modules/AppModule.html":{}}}],["database_password",{"_index":366,"title":{},"body":{"modules/AppModule.html":{}}}],["database_port",{"_index":362,"title":{},"body":{"modules/AppModule.html":{}}}],["database_username",{"_index":364,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseconfig",{"_index":344,"title":{"interfaces/DatabaseConfig.html":{}},"body":{"modules/AppModule.html":{},"interfaces/DatabaseConfig.html":{},"coverage.html":{}}}],["date",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserEntity.html":{}}}],["db",{"_index":533,"title":{},"body":{"controllers/HealthController.html":{}}}],["dbconfig",{"_index":382,"title":{},"body":{"modules/AppModule.html":{}}}],["dbconfig.database",{"_index":394,"title":{},"body":{"modules/AppModule.html":{}}}],["dbconfig.host",{"_index":388,"title":{},"body":{"modules/AppModule.html":{}}}],["dbconfig.password",{"_index":393,"title":{},"body":{"modules/AppModule.html":{}}}],["dbconfig.port",{"_index":389,"title":{},"body":{"modules/AppModule.html":{}}}],["dbconfig.username",{"_index":391,"title":{},"body":{"modules/AppModule.html":{}}}],["decorators",{"_index":27,"title":{},"body":{"entities/Apartment.html":{},"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"entities/ApartmentUser.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateApartmentDto.html":{},"controllers/HealthController.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{}}}],["default",{"_index":66,"title":{},"body":{"entities/Apartment.html":{},"injectables/ApartmentService.html":{},"entities/ApartmentUser.html":{},"interfaces/AppConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/UserContext.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":666,"title":{},"body":{"modules/UserModule.html":{}}}],["defined",{"_index":29,"title":{},"body":{"entities/Apartment.html":{},"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"entities/ApartmentUser.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"classes/CreateApartmentDto.html":{},"controllers/HealthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":202,"title":{"dependencies.html":{}},"body":{"modules/ApartmentModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deposit",{"_index":245,"title":{},"body":{"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["description",{"_index":10,"title":{},"body":{"entities/Apartment.html":{},"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{},"index.html":{},"properties.html":{}}}],["description'})@isstring",{"_index":224,"title":{},"body":{"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["development",{"_index":757,"title":{},"body":{"index.html":{}}}],["dist/**/*.entity{.ts,.js",{"_index":384,"title":{},"body":{"modules/AppModule.html":{}}}],["docsrunning",{"_index":755,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":690,"title":{},"body":{"coverage.html":{}}}],["dto/create",{"_index":148,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{}}}],["dto/login.dto",{"_index":424,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/register.dto.ts",{"_index":425,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["e2e",{"_index":767,"title":{},"body":{"index.html":{}}}],["email",{"_index":459,"title":{},"body":{"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["encodepassword",{"_index":438,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["encodepassword(password",{"_index":444,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["enter",{"_index":235,"title":{},"body":{"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["entities",{"_index":2,"title":{},"body":{"entities/Apartment.html":{},"entities/ApartmentUser.html":{},"modules/AppModule.html":{},"entities/UserEntity.html":{},"overview.html":{}}}],["entities/apartment",{"_index":214,"title":{},"body":{"modules/ApartmentModule.html":{},"injectables/ApartmentService.html":{}}}],["entities/apartment.entity",{"_index":213,"title":{},"body":{"modules/ApartmentModule.html":{},"injectables/ApartmentService.html":{}}}],["entities/user.entity",{"_index":426,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"interfaces/UserContext.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":0,"title":{"entities/Apartment.html":{},"entities/ApartmentUser.html":{},"entities/UserEntity.html":{}},"body":{"entities/Apartment.html":{},"entities/ApartmentUser.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["env",{"_index":376,"title":{},"body":{"modules/AppModule.html":{}}}],["env.example",{"_index":753,"title":{},"body":{"index.html":{}}}],["envdocumentation",{"_index":754,"title":{},"body":{"index.html":{}}}],["envfilepath",{"_index":375,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":558,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error('this",{"_index":300,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["establish",{"_index":579,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["example",{"_index":576,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["exception",{"_index":583,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["exclude",{"_index":651,"title":{},"body":{"entities/UserEntity.html":{}}}],["exclude()@column",{"_index":649,"title":{},"body":{"entities/UserEntity.html":{}}}],["executioncontext",{"_index":553,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["expires",{"_index":403,"title":{},"body":{"interfaces/AuthConfig.html":{}}}],["expiresin",{"_index":670,"title":{},"body":{"modules/UserModule.html":{}}}],["export",{"_index":64,"title":{},"body":{"entities/Apartment.html":{},"controllers/ApartmentController.html":{},"modules/ApartmentModule.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"entities/ApartmentUser.html":{},"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/AuthConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"classes/CreateApartmentDto.html":{},"interfaces/DatabaseConfig.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateApartmentDto.html":{},"interfaces/UserContext.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["express",{"_index":623,"title":{},"body":{"interfaces/UserContext.html":{},"dependencies.html":{}}}],["extends",{"_index":151,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateApartmentDto.html":{},"interfaces/UserContext.html":{}}}],["extractjwt",{"_index":594,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":601,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":49,"title":{},"body":{"entities/Apartment.html":{},"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"entities/ApartmentUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["file",{"_index":5,"title":{},"body":{"entities/Apartment.html":{},"controllers/ApartmentController.html":{},"modules/ApartmentModule.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"entities/ApartmentUser.html":{},"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/AuthConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"classes/CreateApartmentDto.html":{},"interfaces/DatabaseConfig.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateApartmentDto.html":{},"interfaces/UserContext.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["findall",{"_index":76,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{}}}],["findall(ownerid",{"_index":266,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["findapartmentwithinterestedusers",{"_index":253,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["findapartmentwithinterestedusers(apartmentid",{"_index":271,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["findaptuserrecord",{"_index":254,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["findaptuserrecord(apartmentid",{"_index":273,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["findbyemail",{"_index":673,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyemail(email",{"_index":679,"title":{},"body":{"injectables/UserService.html":{}}}],["findone",{"_index":77,"title":{},"body":{"controllers/ApartmentController.html":{},"injectables/ApartmentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param('id",{"_index":172,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["findone(@req",{"_index":632,"title":{},"body":{"controllers/UserController.html":{}}}],["findone(id",{"_index":105,"title":{},"body":{"controllers/ApartmentController.html":{},"injectables/ApartmentService.html":{},"injectables/UserService.html":{}}}],["findone(req",{"_index":626,"title":{},"body":{"controllers/UserController.html":{}}}],["findonewithinterests",{"_index":255,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["findonewithinterests(apartmentid",{"_index":276,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["forbidden",{"_index":157,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["found",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{}}}],["framework",{"_index":747,"title":{},"body":{"index.html":{}}}],["function",{"_index":702,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":739,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generatetoken",{"_index":439,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["generatetoken(user",{"_index":446,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["get(':id",{"_index":171,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["get(':id/interest",{"_index":188,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["get('api",{"_index":534,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('database",{"_index":538,"title":{},"body":{"controllers/HealthController.html":{}}}],["get('private",{"_index":168,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["gethello",{"_index":324,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getinterests",{"_index":78,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["getinterests(@param('id",{"_index":189,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["getinterests(id",{"_index":108,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["getting",{"_index":741,"title":{"index.html":{}},"body":{}}],["graph",{"_index":776,"title":{},"body":{"modules.html":{}}}],["handlerequest",{"_index":548,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":556,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["health",{"_index":519,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":542,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":355,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":527,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":525,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":517,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":335,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["hello",{"_index":400,"title":{},"body":{"injectables/AppService.html":{}}}],["helper",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["here",{"_index":575,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["host",{"_index":387,"title":{},"body":{"modules/AppModule.html":{},"interfaces/DatabaseConfig.html":{}}}],["http",{"_index":532,"title":{},"body":{"controllers/HealthController.html":{}}}],["http://localhost:6002",{"_index":537,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpexception",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('conflict",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('no",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{}}}],["httphealthindicator",{"_index":526,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpmodule",{"_index":543,"title":{},"body":{"modules/HealthModule.html":{}}}],["httpstatus",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.conflict",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.not_found",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{}}}],["iauthguard",{"_index":560,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["id",{"_index":11,"title":{},"body":{"entities/Apartment.html":{},"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"entities/ApartmentUser.html":{},"injectables/AuthHelper.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":691,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":602,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":565,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["import",{"_index":58,"title":{},"body":{"entities/Apartment.html":{},"controllers/ApartmentController.html":{},"modules/ApartmentModule.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"entities/ApartmentUser.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/AuthConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"classes/CreateApartmentDto.html":{},"interfaces/DatabaseConfig.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateApartmentDto.html":{},"interfaces/UserContext.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":215,"title":{},"body":{"modules/ApartmentModule.html":{},"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"entities/Apartment.html":{},"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"entities/ApartmentUser.html":{},"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"interfaces/AuthConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"classes/CreateApartmentDto.html":{},"interfaces/DatabaseConfig.html":{},"controllers/HealthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/UserContext.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"entities/Apartment.html":{},"controllers/ApartmentController.html":{},"modules/ApartmentModule.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"entities/ApartmentUser.html":{},"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/AuthConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"classes/CreateApartmentDto.html":{},"interfaces/DatabaseConfig.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateApartmentDto.html":{},"interfaces/UserContext.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inherited",{"_index":222,"title":{},"body":{"classes/ApartmentResp.html":{}}}],["inject",{"_index":396,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{}}}],["inject(authservice",{"_index":428,"title":{},"body":{"controllers/AuthController.html":{}}}],["injectable",{"_index":249,"title":{"injectables/ApartmentService.html":{},"injectables/AppService.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}},"body":{"injectables/ApartmentService.html":{},"injectables/AppService.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":250,"title":{},"body":{"injectables/ApartmentService.html":{},"injectables/AppService.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":281,"title":{},"body":{"injectables/ApartmentService.html":{},"injectables/UserService.html":{}}}],["injectrepository(apartment",{"_index":282,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["injectrepository(apartmentuser",{"_index":284,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["injectrepository(userentity",{"_index":685,"title":{},"body":{"injectables/UserService.html":{}}}],["input",{"_index":92,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["installation",{"_index":748,"title":{},"body":{"index.html":{}}}],["installenvironment",{"_index":750,"title":{},"body":{"index.html":{}}}],["interested",{"_index":186,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{}}}],["interestedapartments",{"_index":635,"title":{},"body":{"entities/UserEntity.html":{}}}],["interesteduser",{"_index":37,"title":{},"body":{"entities/Apartment.html":{},"entities/UserEntity.html":{}}}],["interesteduser.apartment",{"_index":641,"title":{},"body":{"entities/UserEntity.html":{}}}],["interesteduser.user",{"_index":38,"title":{},"body":{"entities/Apartment.html":{}}}],["interesteduserid",{"_index":279,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["interestedusers",{"_index":13,"title":{},"body":{"entities/Apartment.html":{},"injectables/ApartmentService.html":{}}}],["interface",{"_index":314,"title":{"interfaces/AppConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/UserContext.html":{}},"body":{"interfaces/AppConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/UserContext.html":{},"coverage.html":{}}}],["interfaces",{"_index":316,"title":{},"body":{"interfaces/AppConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/UserContext.html":{},"overview.html":{}}}],["is_public_key",{"_index":562,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isactive",{"_index":14,"title":{},"body":{"entities/Apartment.html":{}}}],["isemail",{"_index":608,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isglobal",{"_index":374,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":501,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["isnumber",{"_index":502,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["ispasswordvalid",{"_index":440,"title":{},"body":{"injectables/AuthHelper.html":{},"injectables/AuthService.html":{}}}],["ispasswordvalid(password",{"_index":448,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["ispublic",{"_index":567,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":503,"title":{},"body":{"classes/CreateApartmentDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["joi",{"_index":338,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["joi.number().default(6002",{"_index":359,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().required().valid(5432",{"_index":363,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":358,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().alphanum().required",{"_index":370,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default('localhost",{"_index":361,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":365,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt",{"_index":437,"title":{},"body":{"injectables/AuthHelper.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":662,"title":{},"body":{"modules/UserModule.html":{}}}],["jwt_expires_in",{"_index":369,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_secret",{"_index":368,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtauthguard",{"_index":351,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":600,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":659,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtmodule.registerasync",{"_index":668,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtservice",{"_index":442,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["jwtstrategy",{"_index":586,"title":{"injectables/JwtStrategy.html":{}},"body":{"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["lastloginat",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{},"entities/UserEntity.html":{}}}],["lat",{"_index":15,"title":{},"body":{"entities/Apartment.html":{},"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["lat'})@isnumber",{"_index":226,"title":{},"body":{"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["less",{"_index":238,"title":{},"body":{"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["license",{"_index":785,"title":{},"body":{"properties.html":{}}}],["licensed",{"_index":771,"title":{},"body":{"index.html":{}}}],["list",{"_index":100,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["lng",{"_index":16,"title":{},"body":{"entities/Apartment.html":{},"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["lng'})@isnumber",{"_index":228,"title":{},"body":{"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["load",{"_index":377,"title":{},"body":{"modules/AppModule.html":{}}}],["logger",{"_index":129,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["logic",{"_index":574,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["login",{"_index":411,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":433,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(body",{"_index":413,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":414,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["manytoone",{"_index":60,"title":{},"body":{"entities/Apartment.html":{},"entities/ApartmentUser.html":{}}}],["manytoone(undefined",{"_index":52,"title":{},"body":{"entities/Apartment.html":{},"entities/ApartmentUser.html":{}}}],["matching",{"_index":68,"title":{},"body":{"entities/Apartment.html":{},"controllers/ApartmentController.html":{},"modules/ApartmentModule.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"entities/ApartmentUser.html":{},"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/AuthConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"classes/CreateApartmentDto.html":{},"interfaces/DatabaseConfig.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateApartmentDto.html":{},"interfaces/UserContext.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["matchinterest",{"_index":80,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["matchinterest(id",{"_index":112,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["matchinterestforapartment",{"_index":256,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["matchinterestforapartment(apartment",{"_index":278,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["maxlength",{"_index":504,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["maxlength(20",{"_index":508,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["message",{"_index":237,"title":{},"body":{"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["metadata",{"_index":728,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":74,"title":{},"body":{"controllers/ApartmentController.html":{},"injectables/ApartmentService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["minlength",{"_index":505,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["minlength(3",{"_index":507,"title":{},"body":{"classes/CreateApartmentDto.html":{}}}],["miscellaneous",{"_index":738,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":770,"title":{},"body":{"index.html":{}}}],["mode",{"_index":760,"title":{},"body":{"index.html":{}}}],["models/user.context",{"_index":563,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/UserController.html":{}}}],["module",{"_index":199,"title":{"modules/ApartmentModule.html":{},"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules/UserModule.html":{}},"body":{"modules/ApartmentModule.html":{},"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":201,"title":{"modules.html":{}},"body":{"modules/ApartmentModule.html":{},"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["monthly",{"_index":231,"title":{},"body":{"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["monthlyrent",{"_index":17,"title":{},"body":{"entities/Apartment.html":{},"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["myapartments",{"_index":81,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["myapartments(@req",{"_index":169,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["myapartments(req",{"_index":117,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["name",{"_index":18,"title":{},"body":{"entities/Apartment.html":{},"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"classes/CreateApartmentDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/RegisterDto.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["name'})@isstring()@minlength(3)@maxlength(20",{"_index":236,"title":{},"body":{"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["nest",{"_index":746,"title":{},"body":{"index.html":{}}}],["nestjs/axios",{"_index":544,"title":{},"body":{"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":134,"title":{},"body":{"controllers/ApartmentController.html":{},"modules/ApartmentModule.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":341,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthConfig.html":{},"interfaces/DatabaseConfig.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":350,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":451,"title":{},"body":{"injectables/AuthHelper.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":618,"title":{},"body":{"classes/UpdateApartmentDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":561,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":715,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":143,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"controllers/AuthController.html":{},"classes/CreateApartmentDto.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":529,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":212,"title":{},"body":{"modules/ApartmentModule.html":{},"injectables/ApartmentService.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":184,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["null",{"_index":267,"title":{},"body":{"injectables/ApartmentService.html":{},"entities/UserEntity.html":{}}}],["nullable",{"_index":645,"title":{},"body":{"entities/UserEntity.html":{}}}],["number",{"_index":32,"title":{},"body":{"entities/Apartment.html":{},"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"entities/ApartmentUser.html":{},"interfaces/AppConfig.html":{},"interfaces/AuthConfig.html":{},"classes/CreateApartmentDto.html":{},"interfaces/DatabaseConfig.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["number(req.user.id",{"_index":177,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["number(userid",{"_index":198,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["occupied",{"_index":19,"title":{},"body":{"entities/Apartment.html":{}}}],["onetomany",{"_index":61,"title":{},"body":{"entities/Apartment.html":{},"entities/UserEntity.html":{}}}],["onetomany(undefined",{"_index":36,"title":{},"body":{"entities/Apartment.html":{},"entities/UserEntity.html":{}}}],["optional",{"_index":96,"title":{},"body":{"controllers/ApartmentController.html":{},"injectables/ApartmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["out",{"_index":207,"title":{},"body":{"modules/ApartmentModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":778,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":20,"title":{},"body":{"entities/Apartment.html":{},"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{}}}],["owner.apartments",{"_index":53,"title":{},"body":{"entities/Apartment.html":{}}}],["ownerid",{"_index":270,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["package",{"_index":709,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":127,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["param('id",{"_index":192,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["param('userid",{"_index":193,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["parameters",{"_index":95,"title":{},"body":{"controllers/ApartmentController.html":{},"injectables/ApartmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parseint(process.env.database_port",{"_index":512,"title":{},"body":{"interfaces/DatabaseConfig.html":{}}}],["parseint(process.env.port",{"_index":319,"title":{},"body":{"interfaces/AppConfig.html":{}}}],["partial",{"_index":683,"title":{},"body":{"injectables/UserService.html":{}}}],["partialtype",{"_index":617,"title":{},"body":{"classes/UpdateApartmentDto.html":{}}}],["partialtype(createapartmentdto",{"_index":620,"title":{},"body":{"classes/UpdateApartmentDto.html":{}}}],["passport",{"_index":596,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":660,"title":{},"body":{"modules/UserModule.html":{}}}],["passportmodule.register",{"_index":665,"title":{},"body":{"modules/UserModule.html":{}}}],["passportstrategy",{"_index":597,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":598,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":392,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"interfaces/DatabaseConfig.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/UserEntity.html":{}}}],["payload",{"_index":593,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":605,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":606,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pg",{"_index":725,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":234,"title":{},"body":{"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["port",{"_index":318,"title":{},"body":{"interfaces/AppConfig.html":{},"modules/AppModule.html":{},"interfaces/DatabaseConfig.html":{}}}],["post",{"_index":125,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"controllers/AuthController.html":{}}}],["post('login",{"_index":432,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":429,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":395,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":73,"title":{},"body":{"controllers/ApartmentController.html":{},"controllers/HealthController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":33,"title":{},"body":{"entities/Apartment.html":{},"entities/ApartmentUser.html":{},"entities/UserEntity.html":{}}}],["private",{"_index":283,"title":{},"body":{"injectables/ApartmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/UserService.html":{}}}],["process.env.database",{"_index":516,"title":{},"body":{"interfaces/DatabaseConfig.html":{}}}],["process.env.database_host",{"_index":511,"title":{},"body":{"interfaces/DatabaseConfig.html":{}}}],["process.env.database_password",{"_index":515,"title":{},"body":{"interfaces/DatabaseConfig.html":{}}}],["process.env.database_username",{"_index":514,"title":{},"body":{"interfaces/DatabaseConfig.html":{}}}],["process.env.jwt_expires_in",{"_index":408,"title":{},"body":{"interfaces/AuthConfig.html":{}}}],["process.env.jwt_secret",{"_index":407,"title":{},"body":{"interfaces/AuthConfig.html":{}}}],["production",{"_index":762,"title":{},"body":{"index.html":{}}}],["promise",{"_index":417,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"entities/Apartment.html":{},"classes/ApartmentResp.html":{},"entities/ApartmentUser.html":{},"interfaces/AppConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthHelper.html":{},"classes/CreateApartmentDto.html":{},"interfaces/DatabaseConfig.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/UserContext.html":{},"entities/UserEntity.html":{},"properties.html":{}}}],["property",{"_index":667,"title":{},"body":{"modules/UserModule.html":{}}}],["provide",{"_index":220,"title":{},"body":{"classes/ApartmentResp.html":{},"modules/AppModule.html":{},"classes/CreateApartmentDto.html":{}}}],["providers",{"_index":209,"title":{},"body":{"modules/ApartmentModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":12,"title":{},"body":{"entities/Apartment.html":{},"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"entities/ApartmentUser.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@apitags('apartment')@useinterceptors(classserializerinterceptor)@apiresponse({status",{"_index":98,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["public()@get",{"_index":325,"title":{},"body":{"controllers/AppController.html":{}}}],["public()@get('api')@healthcheck",{"_index":521,"title":{},"body":{"controllers/HealthController.html":{}}}],["public()@get('database')@healthcheck",{"_index":523,"title":{},"body":{"controllers/HealthController.html":{}}}],["public()@useinterceptors(classserializerinterceptor)@post('login",{"_index":415,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@useinterceptors(classserializerinterceptor)@post('register",{"_index":420,"title":{},"body":{"controllers/AuthController.html":{}}}],["public.decorator",{"_index":329,"title":{},"body":{"controllers/AppController.html":{}}}],["put",{"_index":130,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["put(':id/interest",{"_index":174,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["put(':id/match/:userid",{"_index":191,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["readonly",{"_index":160,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"classes/CreateApartmentDto.html":{},"controllers/HealthController.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["reflect",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":550,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["register",{"_index":412,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":430,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(body",{"_index":418,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registeras",{"_index":405,"title":{},"body":{"interfaces/AuthConfig.html":{},"interfaces/DatabaseConfig.html":{}}}],["registeras('auth",{"_index":406,"title":{},"body":{"interfaces/AuthConfig.html":{}}}],["registeras('db",{"_index":510,"title":{},"body":{"interfaces/DatabaseConfig.html":{}}}],["registerdto",{"_index":419,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["relations",{"_index":290,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["rent",{"_index":232,"title":{},"body":{"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["rentals",{"_index":743,"title":{},"body":{"index.html":{}}}],["repository",{"_index":259,"title":{},"body":{"injectables/ApartmentService.html":{},"injectables/UserService.html":{}}}],["req",{"_index":85,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"controllers/UserController.html":{}}}],["req.user",{"_index":165,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["request",{"_index":622,"title":{},"body":{"interfaces/UserContext.html":{}}}],["reset",{"_index":206,"title":{},"body":{"modules/ApartmentModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["results",{"_index":67,"title":{},"body":{"entities/Apartment.html":{},"controllers/ApartmentController.html":{},"modules/ApartmentModule.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"entities/ApartmentUser.html":{},"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/AuthConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"classes/CreateApartmentDto.html":{},"interfaces/DatabaseConfig.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateApartmentDto.html":{},"interfaces/UserContext.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":163,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":97,"title":{},"body":{"controllers/ApartmentController.html":{},"injectables/ApartmentService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["rooms",{"_index":21,"title":{},"body":{"entities/Apartment.html":{},"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["rooms'})@isstring",{"_index":242,"title":{},"body":{"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["rxjs",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":454,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["secret",{"_index":404,"title":{},"body":{"interfaces/AuthConfig.html":{},"modules/UserModule.html":{}}}],["secretorkey",{"_index":603,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["security",{"_index":244,"title":{},"body":{"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["securitydeposit",{"_index":22,"title":{},"body":{"entities/Apartment.html":{},"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["sendinterest",{"_index":82,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["sendinterest(@param('id",{"_index":175,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["sendinterest(id",{"_index":122,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["session",{"_index":580,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["setmetadata(is_public_key",{"_index":789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signoptions",{"_index":669,"title":{},"body":{"modules/UserModule.html":{}}}],["size",{"_index":23,"title":{},"body":{"entities/Apartment.html":{},"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["size'})@isnumber",{"_index":247,"title":{},"body":{"classes/ApartmentResp.html":{},"classes/CreateApartmentDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"entities/Apartment.html":{},"controllers/ApartmentController.html":{},"modules/ApartmentModule.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"entities/ApartmentUser.html":{},"interfaces/AppConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"interfaces/AuthConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"classes/CreateApartmentDto.html":{},"interfaces/DatabaseConfig.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateApartmentDto.html":{},"interfaces/UserContext.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["src/.../main.ts",{"_index":740,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../public.decorator.ts",{"_index":788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/apartment/apartment.controller.ts",{"_index":72,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"coverage.html":{}}}],["src/apartment/apartment.controller.ts:101",{"_index":124,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["src/apartment/apartment.controller.ts:126",{"_index":111,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["src/apartment/apartment.controller.ts:134",{"_index":115,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["src/apartment/apartment.controller.ts:32",{"_index":218,"title":{},"body":{"classes/ApartmentResp.html":{}}}],["src/apartment/apartment.controller.ts:54",{"_index":94,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["src/apartment/apartment.controller.ts:73",{"_index":104,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["src/apartment/apartment.controller.ts:86",{"_index":121,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["src/apartment/apartment.controller.ts:93",{"_index":107,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["src/apartment/apartment.module.ts",{"_index":208,"title":{},"body":{"modules/ApartmentModule.html":{}}}],["src/apartment/apartment.service.ts",{"_index":251,"title":{},"body":{"injectables/ApartmentService.html":{},"coverage.html":{}}}],["src/apartment/apartment.service.ts:10",{"_index":261,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["src/apartment/apartment.service.ts:18",{"_index":263,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["src/apartment/apartment.service.ts:27",{"_index":268,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["src/apartment/apartment.service.ts:40",{"_index":275,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["src/apartment/apartment.service.ts:44",{"_index":272,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["src/apartment/apartment.service.ts:50",{"_index":265,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["src/apartment/apartment.service.ts:63",{"_index":274,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["src/apartment/apartment.service.ts:76",{"_index":280,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["src/apartment/apartment.service.ts:92",{"_index":277,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["src/apartment/dto/create",{"_index":490,"title":{},"body":{"classes/CreateApartmentDto.html":{},"coverage.html":{}}}],["src/apartment/dto/update",{"_index":616,"title":{},"body":{"classes/UpdateApartmentDto.html":{},"coverage.html":{}}}],["src/apartment/entities/apartment",{"_index":305,"title":{},"body":{"entities/ApartmentUser.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["src/apartment/entities/apartment.entity",{"_index":653,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/apartment/entities/apartment.entity.ts",{"_index":6,"title":{},"body":{"entities/Apartment.html":{},"coverage.html":{}}}],["src/apartment/entities/apartment.entity.ts:14",{"_index":34,"title":{},"body":{"entities/Apartment.html":{}}}],["src/apartment/entities/apartment.entity.ts:17",{"_index":48,"title":{},"body":{"entities/Apartment.html":{}}}],["src/apartment/entities/apartment.entity.ts:20",{"_index":43,"title":{},"body":{"entities/Apartment.html":{}}}],["src/apartment/entities/apartment.entity.ts:23",{"_index":31,"title":{},"body":{"entities/Apartment.html":{}}}],["src/apartment/entities/apartment.entity.ts:26",{"_index":57,"title":{},"body":{"entities/Apartment.html":{}}}],["src/apartment/entities/apartment.entity.ts:29",{"_index":55,"title":{},"body":{"entities/Apartment.html":{}}}],["src/apartment/entities/apartment.entity.ts:32",{"_index":30,"title":{},"body":{"entities/Apartment.html":{}}}],["src/apartment/entities/apartment.entity.ts:35",{"_index":47,"title":{},"body":{"entities/Apartment.html":{}}}],["src/apartment/entities/apartment.entity.ts:38",{"_index":56,"title":{},"body":{"entities/Apartment.html":{}}}],["src/apartment/entities/apartment.entity.ts:41",{"_index":50,"title":{},"body":{"entities/Apartment.html":{}}}],["src/apartment/entities/apartment.entity.ts:44",{"_index":45,"title":{},"body":{"entities/Apartment.html":{}}}],["src/apartment/entities/apartment.entity.ts:47",{"_index":46,"title":{},"body":{"entities/Apartment.html":{}}}],["src/apartment/entities/apartment.entity.ts:50",{"_index":54,"title":{},"body":{"entities/Apartment.html":{}}}],["src/apartment/entities/apartment.entity.ts:53",{"_index":39,"title":{},"body":{"entities/Apartment.html":{}}}],["src/app.controller.ts",{"_index":323,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:11",{"_index":326,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":337,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":398,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":399,"title":{},"body":{"injectables/AppService.html":{}}}],["src/config/app.config.ts",{"_index":317,"title":{},"body":{"interfaces/AppConfig.html":{},"coverage.html":{}}}],["src/config/auth.config.ts",{"_index":402,"title":{},"body":{"interfaces/AuthConfig.html":{},"coverage.html":{}}}],["src/config/database.config.ts",{"_index":509,"title":{},"body":{"interfaces/DatabaseConfig.html":{},"coverage.html":{}}}],["src/health/health.controller.ts",{"_index":518,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:23",{"_index":522,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.controller.ts:32",{"_index":524,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":540,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/main.ts",{"_index":701,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/public.decorator",{"_index":144,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["src/public.decorator.ts",{"_index":704,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/auth.controller.ts",{"_index":410,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/user/auth.controller.ts:25",{"_index":421,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/user/auth.controller.ts:32",{"_index":416,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/user/auth.helper.ts",{"_index":436,"title":{},"body":{"injectables/AuthHelper.html":{},"coverage.html":{}}}],["src/user/auth.helper.ts:14",{"_index":445,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["src/user/auth.helper.ts:20",{"_index":447,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["src/user/auth.helper.ts:24",{"_index":450,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["src/user/auth.helper.ts:8",{"_index":443,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["src/user/auth.service.ts",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/user/auth.service.ts:14",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/user/auth.service.ts:20",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/user/auth.service.ts:37",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/user/dto/login.dto.ts",{"_index":607,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/user/dto/login.dto.ts:5",{"_index":609,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/user/dto/login.dto.ts:8",{"_index":610,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/user/dto/register.dto.ts.ts",{"_index":611,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/user/dto/register.dto.ts.ts:10",{"_index":613,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/user/dto/register.dto.ts.ts:5",{"_index":612,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/user/dto/register.dto.ts.ts:7",{"_index":614,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/user/entities/user.entity",{"_index":59,"title":{},"body":{"entities/Apartment.html":{},"injectables/ApartmentService.html":{},"entities/ApartmentUser.html":{}}}],["src/user/entities/user.entity.ts",{"_index":634,"title":{},"body":{"entities/UserEntity.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:11",{"_index":640,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/user/entities/user.entity.ts:14",{"_index":648,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/user/entities/user.entity.ts:17",{"_index":639,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/user/entities/user.entity.ts:21",{"_index":650,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/user/entities/user.entity.ts:24",{"_index":647,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/user/entities/user.entity.ts:27",{"_index":637,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/user/entities/user.entity.ts:30",{"_index":642,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/user/jwt",{"_index":545,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/user/jwt.strategy.ts",{"_index":587,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/user/jwt.strategy.ts:16",{"_index":592,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/user/jwt.strategy.ts:7",{"_index":590,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/user/models/user.context",{"_index":145,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["src/user/models/user.context.ts",{"_index":621,"title":{},"body":{"interfaces/UserContext.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":625,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:15",{"_index":628,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":658,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":672,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:13",{"_index":678,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:17",{"_index":681,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:21",{"_index":680,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:25",{"_index":684,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:7",{"_index":676,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":758,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":761,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":763,"title":{},"body":{"index.html":{}}}],["started",{"_index":742,"title":{"index.html":{}},"body":{}}],["statements",{"_index":692,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":155,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"controllers/HealthController.html":{}}}],["strategy",{"_index":595,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":26,"title":{},"body":{"entities/Apartment.html":{},"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthHelper.html":{},"classes/CreateApartmentDto.html":{},"interfaces/DatabaseConfig.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["successfully",{"_index":88,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["super",{"_index":566,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":581,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["super.login(request",{"_index":578,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":773,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":774,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":385,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":708,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":707,"title":{},"body":{"coverage.html":{}}}],["terminusmodule",{"_index":541,"title":{},"body":{"modules/HealthModule.html":{}}}],["test",{"_index":766,"title":{},"body":{"index.html":{}}}],["test:covlicense",{"_index":769,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":768,"title":{},"body":{"index.html":{}}}],["tests",{"_index":765,"title":{},"body":{"index.html":{}}}],["this.apartmentrepository.create",{"_index":285,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["this.apartmentrepository.find",{"_index":289,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["this.apartmentrepository.findone(apartmentid",{"_index":292,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["this.apartmentrepository.findone(id",{"_index":291,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["this.apartmentrepository.save(apartment",{"_index":286,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["this.apartmentservice.create(createapartmentdto",{"_index":164,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["this.apartmentservice.createinterestforapartment",{"_index":187,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["this.apartmentservice.findall",{"_index":166,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["this.apartmentservice.findall(+req.user.id",{"_index":170,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["this.apartmentservice.findapartmentwithinterestedusers(apartmentid",{"_index":180,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["this.apartmentservice.findaptuserrecord(apartmentid",{"_index":182,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["this.apartmentservice.findone(+id",{"_index":173,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["this.apartmentservice.findone(apartmentid",{"_index":194,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["this.apartmentservice.findonewithinterests(+id",{"_index":190,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["this.apartmentservice.matchinterestforapartment",{"_index":197,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["this.apartmentuserrepository.create",{"_index":293,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["this.apartmentuserrepository.find",{"_index":304,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["this.apartmentuserrepository.findone",{"_index":297,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["this.apartmentuserrepository.save(apartmentinteresteduser",{"_index":302,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["this.apartmentuserrepository.save(apartmentuser",{"_index":295,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["this.appservice.gethello",{"_index":330,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(body",{"_index":434,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(body",{"_index":431,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.db.pingcheck('database",{"_index":539,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.findaptuserrecord",{"_index":298,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["this.health.check",{"_index":535,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.helper.encodepassword(password",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.helper.generatetoken(user",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.helper.ispasswordvalid",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.http.pingcheck('rentals",{"_index":536,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.jwt",{"_index":453,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["this.jwt.sign",{"_index":457,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":568,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.repository.findone",{"_index":687,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repository.save(user",{"_index":686,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repository.update(id",{"_index":688,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.create(user",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyemail(email",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findone(req.user.id",{"_index":633,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(user.id",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":183,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["timestamp",{"_index":644,"title":{},"body":{"entities/UserEntity.html":{}}}],["token",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{}}}],["transformer",{"_index":652,"title":{},"body":{"entities/UserEntity.html":{},"dependencies.html":{}}}],["true",{"_index":42,"title":{},"body":{"entities/Apartment.html":{},"injectables/ApartmentService.html":{},"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":24,"title":{},"body":{"entities/Apartment.html":{},"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"entities/ApartmentUser.html":{},"interfaces/AppConfig.html":{},"modules/AppModule.html":{},"interfaces/AuthConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"classes/CreateApartmentDto.html":{},"interfaces/DatabaseConfig.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/UserContext.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":62,"title":{},"body":{"entities/Apartment.html":{},"injectables/ApartmentService.html":{},"entities/ApartmentUser.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormhealthindicator",{"_index":528,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormmodule",{"_index":211,"title":{},"body":{"modules/ApartmentModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([apartment",{"_index":216,"title":{},"body":{"modules/ApartmentModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":664,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":379,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":619,"title":{},"body":{"classes/UpdateApartmentDto.html":{},"dependencies.html":{}}}],["ui",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["undefined",{"_index":646,"title":{},"body":{"entities/UserEntity.html":{}}}],["undefined})@get",{"_index":103,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["unique",{"_index":655,"title":{},"body":{"entities/UserEntity.html":{}}}],["unit",{"_index":764,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":116,"title":{},"body":{"controllers/ApartmentController.html":{},"injectables/ApartmentService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["unlicensed",{"_index":786,"title":{},"body":{"properties.html":{}}}],["update",{"_index":674,"title":{},"body":{"injectables/UserService.html":{}}}],["update(id",{"_index":682,"title":{},"body":{"injectables/UserService.html":{}}}],["updateapartmentdto",{"_index":615,"title":{"classes/UpdateApartmentDto.html":{}},"body":{"classes/UpdateApartmentDto.html":{},"coverage.html":{}}}],["useclass",{"_index":397,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":380,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["useguards",{"_index":128,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard",{"_index":631,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@get",{"_index":627,"title":{},"body":{"controllers/UserController.html":{}}}],["useinterceptors",{"_index":133,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"controllers/AuthController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":161,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"controllers/AuthController.html":{}}}],["user",{"_index":167,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"entities/ApartmentUser.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/UserContext.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user')@apibearerauth()@useinterceptors(classserializerinterceptor)@get('private",{"_index":120,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["user')@useinterceptors(classserializerinterceptor)@apibearerauth()@get(':id/interest",{"_index":110,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["user')@useinterceptors(classserializerinterceptor)@apibearerauth()@put(':id/interest",{"_index":123,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["user')@useinterceptors(classserializerinterceptor)@apibearerauth()@put(':id/match/:userid",{"_index":114,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["user.controller",{"_index":663,"title":{},"body":{"modules/UserModule.html":{}}}],["user.email",{"_index":460,"title":{},"body":{"injectables/AuthHelper.html":{},"injectables/AuthService.html":{}}}],["user.entity",{"_index":63,"title":{},"body":{"entities/Apartment.html":{},"modules/ApartmentModule.html":{},"injectables/ApartmentService.html":{},"entities/UserEntity.html":{}}}],["user.entity.ts",{"_index":306,"title":{},"body":{"entities/ApartmentUser.html":{},"coverage.html":{}}}],["user.entity.ts:11",{"_index":307,"title":{},"body":{"entities/ApartmentUser.html":{}}}],["user.entity.ts:14",{"_index":309,"title":{},"body":{"entities/ApartmentUser.html":{}}}],["user.entity.ts:17",{"_index":312,"title":{},"body":{"entities/ApartmentUser.html":{}}}],["user.entity.ts:8",{"_index":310,"title":{},"body":{"entities/ApartmentUser.html":{}}}],["user.id",{"_index":458,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["user.interestedapartments",{"_index":311,"title":{},"body":{"entities/ApartmentUser.html":{}}}],["user.name",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/jwt",{"_index":352,"title":{},"body":{"modules/AppModule.html":{}}}],["user/user.module",{"_index":348,"title":{},"body":{"modules/AppModule.html":{}}}],["usercontext",{"_index":86,"title":{"interfaces/UserContext.html":{}},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/UserContext.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["usercontroller",{"_index":624,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userentity",{"_index":51,"title":{"entities/UserEntity.html":{}},"body":{"entities/Apartment.html":{},"injectables/ApartmentService.html":{},"entities/ApartmentUser.html":{},"controllers/AuthController.html":{},"injectables/AuthHelper.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/UserContext.html":{},"entities/UserEntity.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userid",{"_index":113,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{},"injectables/ApartmentService.html":{},"injectables/JwtStrategy.html":{}}}],["usermodule",{"_index":336,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":390,"title":{},"body":{"modules/AppModule.html":{},"interfaces/DatabaseConfig.html":{},"injectables/JwtStrategy.html":{}}}],["userpassword",{"_index":449,"title":{},"body":{"injectables/AuthHelper.html":{}}}],["users",{"_index":654,"title":{},"body":{"entities/UserEntity.html":{}}}],["userservice",{"_index":464,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":745,"title":{},"body":{"index.html":{}}}],["validate",{"_index":588,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":591,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validation",{"_index":162,"title":{},"body":{"controllers/ApartmentController.html":{},"classes/ApartmentResp.html":{}}}],["validation'})@post",{"_index":93,"title":{},"body":{"controllers/ApartmentController.html":{}}}],["validationoptions",{"_index":371,"title":{},"body":{"modules/AppModule.html":{}}}],["validationschema",{"_index":357,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":506,"title":{},"body":{"classes/CreateApartmentDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"dependencies.html":{}}}],["value",{"_index":269,"title":{},"body":{"injectables/ApartmentService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":705,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":751,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":783,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":759,"title":{},"body":{"index.html":{}}}],["where['id",{"_index":287,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["where['occupied",{"_index":288,"title":{},"body":{"injectables/ApartmentService.html":{}}}],["world",{"_index":401,"title":{},"body":{"injectables/AppService.html":{}}}],["yarn",{"_index":749,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":205,"title":{},"body":{"modules/ApartmentModule.html":{},"modules/AppModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"entities/Apartment.html":{"url":"entities/Apartment.html","title":"entity - Apartment","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Apartment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apartment/entities/apartment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                    Public\n                                interestedUsers\n                            \n                            \n                                isActive\n                            \n                            \n                                lat\n                            \n                            \n                                lng\n                            \n                            \n                                monthlyRent\n                            \n                            \n                                name\n                            \n                            \n                                occupied\n                            \n                            \n                                    Public\n                                owner\n                            \n                            \n                                rooms\n                            \n                            \n                                securityDeposit\n                            \n                            \n                                size\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/entities/apartment.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/entities/apartment.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/entities/apartment.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interestedUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApartmentUser[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, interestedUser => interestedUser.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/entities/apartment.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/entities/apartment.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('float')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/entities/apartment.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lng\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('float')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/entities/apartment.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        monthlyRent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/entities/apartment.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/entities/apartment.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        occupied\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/entities/apartment.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, owner => owner.apartments)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/entities/apartment.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/entities/apartment.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        securityDeposit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/entities/apartment.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/entities/apartment.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { UserEntity } from 'src/user/entities/user.entity';\nimport {\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { ApartmentUser } from './apartment-user.entity';\n\n@Entity()\nexport class Apartment {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column({ default: true })\n  isActive: boolean;\n\n  @Column()\n  description: string;\n\n  @Column()\n  size: number;\n\n  @Column()\n  rooms: string;\n\n  @Column()\n  address: string;\n\n  @Column()\n  monthlyRent: number;\n\n  @Column()\n  securityDeposit: number;\n\n  @Column({ default: false })\n  occupied: boolean;\n\n  @Column('float')\n  lat: number;\n\n  @Column('float')\n  lng: number;\n\n  @ManyToOne(() => UserEntity, (owner: UserEntity) => owner.apartments)\n  public owner: UserEntity;\n\n  @OneToMany(() => ApartmentUser, (interestedUser) => interestedUser.user)\n  public interestedUsers!: ApartmentUser[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ApartmentController.html":{"url":"controllers/ApartmentController.html","title":"controller - ApartmentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ApartmentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apartment/apartment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                apartment\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                getInterests\n                            \n                            \n                                    Async\n                                matchInterest\n                            \n                            \n                                myApartments\n                            \n                            \n                                    Async\n                                sendInterest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createApartmentDto: CreateApartmentDto, req: UserContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('apartment')@UseInterceptors(ClassSerializerInterceptor)@ApiBearerAuth()@ApiCreatedResponse({description: 'The apartment has been successfully created.', type: ApartmentResp})@ApiBadRequestResponse({status: 400, description: 'Input validation'})@Post()\n                \n            \n\n            \n                \n                    Defined in src/apartment/apartment.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createApartmentDto\n                                    \n                                                CreateApartmentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                UserContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@ApiTags('apartment')@UseInterceptors(ClassSerializerInterceptor)@ApiResponse({status: 200, description: 'List of apartments.', type: ApartmentResp})@ApiBody({type: undefined})@Get()\n                \n            \n\n            \n                \n                    Defined in src/apartment/apartment.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('apartment')@UseInterceptors(ClassSerializerInterceptor)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/apartment/apartment.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInterests\n                        \n                    \n                \n            \n            \n                \ngetInterests(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('apartment user')@UseInterceptors(ClassSerializerInterceptor)@ApiBearerAuth()@Get(':id/interest')\n                \n            \n\n            \n                \n                    Defined in src/apartment/apartment.controller.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        matchInterest\n                        \n                    \n                \n            \n            \n                \n                    \n                    matchInterest(id: string, userId: number, req: UserContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('apartment user')@UseInterceptors(ClassSerializerInterceptor)@ApiBearerAuth()@Put(':id/match/:userId')\n                \n            \n\n            \n                \n                    Defined in src/apartment/apartment.controller.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                UserContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        myApartments\n                        \n                    \n                \n            \n            \n                \nmyApartments(req: UserContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({status: 200, description: 'My list of apartments.', type: ApartmentResp})@ApiTags('apartment user')@ApiBearerAuth()@UseInterceptors(ClassSerializerInterceptor)@Get('private')\n                \n            \n\n            \n                \n                    Defined in src/apartment/apartment.controller.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                UserContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendInterest\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendInterest(id: string, req: UserContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('apartment user')@UseInterceptors(ClassSerializerInterceptor)@ApiBearerAuth()@Put(':id/interest')\n                \n            \n\n            \n                \n                    Defined in src/apartment/apartment.controller.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                UserContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  UseGuards,\n  Logger,\n  Req,\n  Put,\n  BadRequestException,\n  ClassSerializerInterceptor,\n  UseInterceptors,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiBody,\n  ApiCreatedResponse,\n  ApiHeader,\n  ApiProperty,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { Public } from 'src/public.decorator';\nimport UserContext from 'src/user/models/user.context';\nimport { ApartmentService } from './apartment.service';\nimport { CreateApartmentDto } from './dto/create-apartment.dto';\n\nclass ApartmentResp extends CreateApartmentDto {\n  @ApiProperty()\n  id: string;\n}\n\n@ApiHeader({\n  name: 'Content-Type',\n  description: 'application/json',\n  allowEmptyValue: false,\n})\n@ApiResponse({ status: 403, description: 'Forbidden.' })\n@Controller('apartment')\nexport class ApartmentController {\n  constructor(private readonly apartmentService: ApartmentService) {}\n\n  @ApiTags('apartment')\n  @UseInterceptors(ClassSerializerInterceptor)\n  @ApiBearerAuth()\n  @ApiCreatedResponse({\n    description: 'The apartment has been successfully created.',\n    type: ApartmentResp,\n  })\n  @ApiBadRequestResponse({ status: 400, description: 'Input validation' })\n  @Post()\n  create(\n    @Body() createApartmentDto: CreateApartmentDto,\n    @Req() req: UserContext,\n  ) {\n    return this.apartmentService.create(createApartmentDto, req.user);\n  }\n\n  @Public()\n  @ApiTags('apartment')\n  @UseInterceptors(ClassSerializerInterceptor)\n  @ApiResponse({\n    status: 200,\n    description: 'List of apartments.',\n    type: ApartmentResp,\n  })\n  @ApiBody({\n    type: [CreateApartmentDto],\n  })\n  @Get()\n  findAll() {\n    return this.apartmentService.findAll();\n  }\n\n  @ApiResponse({\n    status: 200,\n    description: 'My list of apartments.',\n    type: ApartmentResp,\n  })\n  @ApiTags('apartment user')\n  @ApiBearerAuth()\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Get('private')\n  myApartments(@Req() req: UserContext) {\n    return this.apartmentService.findAll(+req.user.id);\n  }\n\n  @ApiTags('apartment')\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.apartmentService.findOne(+id);\n  }\n\n  @ApiTags('apartment user')\n  @UseInterceptors(ClassSerializerInterceptor)\n  @ApiBearerAuth()\n  @Put(':id/interest')\n  async sendInterest(@Param('id') id: string, @Req() req: UserContext) {\n    const userId = Number(req.user.id);\n    const apartmentId = +id;\n    const apartment =\n      await this.apartmentService.findApartmentWithInterestedUsers(apartmentId);\n\n    const apartmentInterestedUser =\n      await this.apartmentService.findAptUserRecord(apartmentId, userId);\n\n    if (apartmentInterestedUser) {\n      throw new BadRequestException(\n        'You are already interested in this apartment',\n      );\n    }\n\n    return this.apartmentService.createInterestForApartment(\n      apartment,\n      req.user,\n    );\n  }\n\n  @ApiTags('apartment user')\n  @UseInterceptors(ClassSerializerInterceptor)\n  @ApiBearerAuth()\n  @Get(':id/interest')\n  getInterests(@Param('id') id: string) {\n    return this.apartmentService.findOneWithInterests(+id);\n  }\n\n  @ApiTags('apartment user')\n  @UseInterceptors(ClassSerializerInterceptor)\n  @ApiBearerAuth()\n  @Put(':id/match/:userId')\n  async matchInterest(\n    @Param('id') id: string,\n    @Param('userId') userId: number,\n    @Req() req: UserContext,\n  ) {\n    const apartmentId = +id;\n\n    const apartment = await this.apartmentService.findOne(apartmentId);\n    if (apartment.owner.id !== Number(req.user.id)) {\n      throw new BadRequestException('You are not the owner of this apartment');\n    }\n\n    return this.apartmentService.matchInterestForApartment(\n      apartment,\n      Number(userId),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ApartmentModule.html":{"url":"modules/ApartmentModule.html","title":"module - ApartmentModule","body":"\n                   \n\n\n\n\n    Modules\n    ApartmentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApartmentModule\n\n\n\ncluster_ApartmentModule_providers\n\n\n\n\nApartmentService\n\nApartmentService\n\n\n\nApartmentModule\n\nApartmentModule\n\nApartmentModule -->\n\nApartmentService->ApartmentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/apartment/apartment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ApartmentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ApartmentController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ApartmentService } from './apartment.service';\nimport { ApartmentController } from './apartment.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Apartment } from './entities/apartment.entity';\nimport { ApartmentUser } from './entities/apartment-user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Apartment, ApartmentUser])],\n  controllers: [ApartmentController],\n  providers: [ApartmentService],\n})\nexport class ApartmentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApartmentResp.html":{"url":"classes/ApartmentResp.html","title":"class - ApartmentResp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApartmentResp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apartment/apartment.controller.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CreateApartmentDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                    Readonly\n                                address\n                            \n                            \n                                    Readonly\n                                description\n                            \n                            \n                                    Readonly\n                                lat\n                            \n                            \n                                    Readonly\n                                lng\n                            \n                            \n                                    Readonly\n                                monthlyRent\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                rooms\n                            \n                            \n                                    Readonly\n                                securityDeposit\n                            \n                            \n                                    Readonly\n                                size\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/apartment.controller.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Provide address'})@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateApartmentDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateApartmentDto:48\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Provide description'})@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateApartmentDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateApartmentDto:27\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        lat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Provide lat'})@IsNumber()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateApartmentDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateApartmentDto:69\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        lng\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Provide lng'})@IsNumber()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateApartmentDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateApartmentDto:76\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        monthlyRent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsNotEmpty({message: 'Provide Monthly Rent'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateApartmentDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateApartmentDto:55\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Please enter name'})@IsString()@MinLength(3)@MaxLength(20, {message: 'Name must be less than 20 characters'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateApartmentDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateApartmentDto:20\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        rooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Provide rooms'})@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateApartmentDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateApartmentDto:41\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        securityDeposit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsNotEmpty({message: 'Provide Security Deposit'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateApartmentDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateApartmentDto:62\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Provide size'})@IsNumber()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateApartmentDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateApartmentDto:34\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  UseGuards,\n  Logger,\n  Req,\n  Put,\n  BadRequestException,\n  ClassSerializerInterceptor,\n  UseInterceptors,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiBody,\n  ApiCreatedResponse,\n  ApiHeader,\n  ApiProperty,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { Public } from 'src/public.decorator';\nimport UserContext from 'src/user/models/user.context';\nimport { ApartmentService } from './apartment.service';\nimport { CreateApartmentDto } from './dto/create-apartment.dto';\n\nclass ApartmentResp extends CreateApartmentDto {\n  @ApiProperty()\n  id: string;\n}\n\n@ApiHeader({\n  name: 'Content-Type',\n  description: 'application/json',\n  allowEmptyValue: false,\n})\n@ApiResponse({ status: 403, description: 'Forbidden.' })\n@Controller('apartment')\nexport class ApartmentController {\n  constructor(private readonly apartmentService: ApartmentService) {}\n\n  @ApiTags('apartment')\n  @UseInterceptors(ClassSerializerInterceptor)\n  @ApiBearerAuth()\n  @ApiCreatedResponse({\n    description: 'The apartment has been successfully created.',\n    type: ApartmentResp,\n  })\n  @ApiBadRequestResponse({ status: 400, description: 'Input validation' })\n  @Post()\n  create(\n    @Body() createApartmentDto: CreateApartmentDto,\n    @Req() req: UserContext,\n  ) {\n    return this.apartmentService.create(createApartmentDto, req.user);\n  }\n\n  @Public()\n  @ApiTags('apartment')\n  @UseInterceptors(ClassSerializerInterceptor)\n  @ApiResponse({\n    status: 200,\n    description: 'List of apartments.',\n    type: ApartmentResp,\n  })\n  @ApiBody({\n    type: [CreateApartmentDto],\n  })\n  @Get()\n  findAll() {\n    return this.apartmentService.findAll();\n  }\n\n  @ApiResponse({\n    status: 200,\n    description: 'My list of apartments.',\n    type: ApartmentResp,\n  })\n  @ApiTags('apartment user')\n  @ApiBearerAuth()\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Get('private')\n  myApartments(@Req() req: UserContext) {\n    return this.apartmentService.findAll(+req.user.id);\n  }\n\n  @ApiTags('apartment')\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.apartmentService.findOne(+id);\n  }\n\n  @ApiTags('apartment user')\n  @UseInterceptors(ClassSerializerInterceptor)\n  @ApiBearerAuth()\n  @Put(':id/interest')\n  async sendInterest(@Param('id') id: string, @Req() req: UserContext) {\n    const userId = Number(req.user.id);\n    const apartmentId = +id;\n    const apartment =\n      await this.apartmentService.findApartmentWithInterestedUsers(apartmentId);\n\n    const apartmentInterestedUser =\n      await this.apartmentService.findAptUserRecord(apartmentId, userId);\n\n    if (apartmentInterestedUser) {\n      throw new BadRequestException(\n        'You are already interested in this apartment',\n      );\n    }\n\n    return this.apartmentService.createInterestForApartment(\n      apartment,\n      req.user,\n    );\n  }\n\n  @ApiTags('apartment user')\n  @UseInterceptors(ClassSerializerInterceptor)\n  @ApiBearerAuth()\n  @Get(':id/interest')\n  getInterests(@Param('id') id: string) {\n    return this.apartmentService.findOneWithInterests(+id);\n  }\n\n  @ApiTags('apartment user')\n  @UseInterceptors(ClassSerializerInterceptor)\n  @ApiBearerAuth()\n  @Put(':id/match/:userId')\n  async matchInterest(\n    @Param('id') id: string,\n    @Param('userId') userId: number,\n    @Req() req: UserContext,\n  ) {\n    const apartmentId = +id;\n\n    const apartment = await this.apartmentService.findOne(apartmentId);\n    if (apartment.owner.id !== Number(req.user.id)) {\n      throw new BadRequestException('You are not the owner of this apartment');\n    }\n\n    return this.apartmentService.matchInterestForApartment(\n      apartment,\n      Number(userId),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApartmentService.html":{"url":"injectables/ApartmentService.html","title":"injectable - ApartmentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ApartmentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apartment/apartment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createInterestForApartment\n                            \n                            \n                                findAll\n                            \n                            \n                                findApartmentWithInterestedUsers\n                            \n                            \n                                    Async\n                                findAptUserRecord\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                findOneWithInterests\n                            \n                            \n                                    Async\n                                matchInterestForApartment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(apartmentRepository: Repository, apartmentUserRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/apartment/apartment.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        apartmentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        apartmentUserRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createApartmentDto: CreateApartmentDto, user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/apartment/apartment.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createApartmentDto\n                                    \n                                                CreateApartmentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createInterestForApartment\n                        \n                    \n                \n            \n            \n                \n                    \n                    createInterestForApartment(apartment: Apartment, user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/apartment/apartment.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    apartment\n                                    \n                                                Apartment\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(ownerId: null)\n                \n            \n\n\n            \n                \n                    Defined in src/apartment/apartment.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    ownerId\n                                    \n                                            null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findApartmentWithInterestedUsers\n                        \n                    \n                \n            \n            \n                \nfindApartmentWithInterestedUsers(apartmentId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/apartment/apartment.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    apartmentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAptUserRecord\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAptUserRecord(apartmentId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/apartment/apartment.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    apartmentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/apartment/apartment.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneWithInterests\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneWithInterests(apartmentId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/apartment/apartment.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    apartmentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        matchInterestForApartment\n                        \n                    \n                \n            \n            \n                \n                    \n                    matchInterestForApartment(apartment, interestedUserId)\n                \n            \n\n\n            \n                \n                    Defined in src/apartment/apartment.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    apartment\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    interestedUserId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserEntity } from 'src/user/entities/user.entity';\nimport { Repository } from 'typeorm';\nimport { CreateApartmentDto } from './dto/create-apartment.dto';\nimport { ApartmentUser } from './entities/apartment-user.entity';\nimport { Apartment } from './entities/apartment.entity';\n\n@Injectable()\nexport class ApartmentService {\n  constructor(\n    @InjectRepository(Apartment)\n    private readonly apartmentRepository: Repository,\n    @InjectRepository(ApartmentUser)\n    private readonly apartmentUserRepository: Repository,\n  ) {}\n\n  async create(createApartmentDto: CreateApartmentDto, user: UserEntity) {\n    const apartment = await this.apartmentRepository.create({\n      ...createApartmentDto,\n      owner: user,\n    });\n    await this.apartmentRepository.save(apartment);\n    return apartment;\n  }\n\n  findAll(ownerId = null) {\n    const where = {};\n    if (ownerId) {\n      where['id'] = ownerId;\n    } else {\n      where['occupied'] = false;\n    }\n    return this.apartmentRepository.find({\n      relations: ['owner'],\n      where,\n    });\n  }\n\n  findOne(id: number) {\n    return this.apartmentRepository.findOne(id, { relations: ['owner'] });\n  }\n\n  findApartmentWithInterestedUsers(apartmentId: number) {\n    return this.apartmentRepository.findOne(apartmentId, {\n      relations: ['interestedUsers'],\n    });\n  }\n\n  async createInterestForApartment(apartment: Apartment, user: UserEntity) {\n    const apartmentUser = await this.apartmentUserRepository.create({\n      user,\n      apartment,\n      accepted: false,\n    });\n\n    await this.apartmentUserRepository.save(apartmentUser);\n    apartment.interestedUsers.push(apartmentUser);\n    await this.apartmentRepository.save(apartment);\n    return apartmentUser;\n  }\n\n  async findAptUserRecord(apartmentId: number, userId: number) {\n    return await this.apartmentUserRepository.findOne({\n      where: {\n        apartment: {\n          id: apartmentId,\n        },\n        user: {\n          id: userId,\n        },\n      },\n    });\n  }\n\n  async matchInterestForApartment(apartment, interestedUserId) {\n    const apartmentInterestedUser = await this.findAptUserRecord(\n      apartment.id,\n      interestedUserId,\n    );\n\n    if (!apartmentInterestedUser) {\n      throw new Error('This user is not interested in this apartment');\n    }\n    apartmentInterestedUser.accepted = true;\n    await this.apartmentUserRepository.save(apartmentInterestedUser);\n    apartment.occupied = true;\n    await this.apartmentRepository.save(apartment);\n    return apartmentInterestedUser;\n  }\n\n  async findOneWithInterests(apartmentId: number) {\n    const apartment = await this.apartmentUserRepository.find({\n      where: {\n        apartment: apartmentId,\n      },\n      relations: ['user'],\n    });\n\n    return apartment;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ApartmentUser.html":{"url":"entities/ApartmentUser.html","title":"entity - ApartmentUser","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ApartmentUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apartment/entities/apartment-user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                accepted\n                            \n                            \n                                    Public\n                                apartment\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        accepted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/entities/apartment-user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        apartment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Apartment\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, apartment => apartment.interestedUsers)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/entities/apartment-user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/entities/apartment-user.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.interestedApartments)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/entities/apartment-user.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { UserEntity } from 'src/user/entities/user.entity';\nimport { ManyToOne, Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\nimport { Apartment } from './apartment.entity';\n\n@Entity()\nexport class ApartmentUser {\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @Column({ default: false })\n  public accepted!: boolean;\n\n  @ManyToOne(() => Apartment, (apartment) => apartment.interestedUsers)\n  public apartment!: Apartment;\n\n  @ManyToOne(() => UserEntity, (user) => user.interestedApartments)\n  public user!: UserEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AppConfig.html":{"url":"interfaces/AppConfig.html","title":"interface - AppConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AppConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/app.config.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            port\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface AppConfig {\n  port: number;\n}\n\nexport default () => ({\n  port: parseInt(process.env.PORT, 10) || 6002,\n});\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { Public } from './public.decorator';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Public()\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nApartmentModule\n\nApartmentModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApartmentModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApartmentModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import * as Joi from 'joi';\nimport { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport appConfig from './config/app.config';\nimport databaseConfig, { DatabaseConfig } from './config/database.config';\nimport authConfig from './config/auth.config';\nimport { UserModule } from './user/user.module';\nimport { APP_GUARD } from '@nestjs/core';\nimport { JwtAuthGuard } from './user/jwt-auth.guard';\nimport { ApartmentModule } from './apartment/apartment.module';\nimport { HealthModule } from './health/health.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        PORT: Joi.number().default(6002),\n        DATABASE_HOST: Joi.string().default('localhost'),\n        DATABASE_PORT: Joi.number().required().valid(5432),\n        DATABASE_USERNAME: Joi.string().required(),\n        DATABASE_PASSWORD: Joi.string().required(),\n        DATABASE: Joi.string().required(),\n        JWT_SECRET: Joi.string().required(),\n        JWT_EXPIRES_IN: Joi.string().alphanum().required(),\n      }),\n      validationOptions: {\n        allowUnknown: true,\n        abortEarly: true,\n      },\n      isGlobal: true,\n      envFilePath: '.env',\n      load: [appConfig, databaseConfig, authConfig],\n      cache: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (config: ConfigService) => {\n        const dbConfig = config.get('db');\n        return {\n          entities: ['dist/**/*.entity{.ts,.js}'],\n          synchronize: true,\n          autoLoadEntities: true,\n          host: dbConfig.host,\n          port: dbConfig.port,\n          username: dbConfig.username,\n          password: dbConfig.password,\n          database: dbConfig.database,\n          type: 'postgres',\n        };\n      },\n      inject: [ConfigService],\n    }),\n    UserModule,\n    ApartmentModule,\n    HealthModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthConfig.html":{"url":"interfaces/AuthConfig.html","title":"interface - AuthConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/auth.config.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            expires\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        expires\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expires:     number | string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\n\nexport interface AuthConfig {\n  secret: string;\n  expires: number | string;\n}\n\nexport default registerAs('auth', () => ({\n  secret: process.env.JWT_SECRET,\n  expires: process.env.JWT_EXPIRES_IN,\n}));\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/auth.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                login\n                            \n                            \n                                    Private\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(body: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@UseInterceptors(ClassSerializerInterceptor)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/user/auth.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(body: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@UseInterceptors(ClassSerializerInterceptor)@Post('register')\n                \n            \n\n            \n                \n                    Defined in src/user/auth.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Inject,\n  Post,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Public } from 'src/public.decorator';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto.ts';\nimport { UserEntity } from './entities/user.entity';\n\n@ApiTags('auth')\n@Controller()\nexport class AuthController {\n  @Inject(AuthService)\n  private readonly authService: AuthService;\n\n  @Public()\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Post('register')\n  private register(@Body() body: RegisterDto): Promise {\n    return this.authService.register(body);\n  }\n\n  @Public()\n  @UseInterceptors(ClassSerializerInterceptor)\n  @Post('login')\n  private async login(@Body() body: LoginDto): Promise {\n    return await this.authService.login(body);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthHelper.html":{"url":"injectables/AuthHelper.html","title":"injectable - AuthHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/auth.helper.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                jwt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                encodePassword\n                            \n                            \n                                    Public\n                                generateToken\n                            \n                            \n                                    Public\n                                isPasswordValid\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwt: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/user/auth.helper.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwt\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        encodePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    encodePassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/auth.helper.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/user/auth.helper.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isPasswordValid\n                        \n                    \n                \n            \n            \n                \n                    \n                    isPasswordValid(password: string, userPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/auth.helper.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        jwt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JwtService\n\n                    \n                \n                    \n                        \n                                Defined in src/user/auth.helper.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\nimport { UserEntity } from './entities/user.entity';\n\n@Injectable()\nexport class AuthHelper {\n  private readonly jwt: JwtService;\n\n  constructor(jwt: JwtService) {\n    this.jwt = jwt;\n  }\n\n  public encodePassword(password: string): string {\n    const salt: string = bcrypt.genSaltSync(10);\n\n    return bcrypt.hashSync(password, salt);\n  }\n\n  public generateToken(user: UserEntity): string {\n    return this.jwt.sign({ id: user.id, email: user.email });\n  }\n\n  public isPasswordValid(password: string, userPassword: string): boolean {\n    return bcrypt.compareSync(password, userPassword);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, helper: AuthHelper)\n                    \n                \n                        \n                            \n                                Defined in src/user/auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        helper\n                                                  \n                                                        \n                                                                        AuthHelper\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(body: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/auth.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(body: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/auth.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  HttpStatus,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthHelper } from './auth.helper';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto.ts';\nimport { UserEntity } from './entities/user.entity';\nimport { UserService } from './user.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly userService: UserService,\n    private readonly helper: AuthHelper,\n  ) {}\n\n  public async register(body: RegisterDto): Promise {\n    const { name, email, password }: RegisterDto = body;\n    let user: UserEntity = await this.userService.findByEmail(email);\n\n    if (user) {\n      throw new HttpException('Conflict', HttpStatus.CONFLICT);\n    }\n\n    user = new UserEntity();\n\n    user.name = name;\n    user.email = email;\n    user.password = this.helper.encodePassword(password);\n\n    return this.userService.create(user);\n  }\n\n  public async login(body: LoginDto): Promise {\n    const { email, password }: LoginDto = body;\n    const user: UserEntity = await this.userService.findByEmail(email);\n\n    if (!user) {\n      throw new HttpException('No user found', HttpStatus.NOT_FOUND);\n    }\n\n    const isPasswordValid: boolean = this.helper.isPasswordValid(\n      password,\n      user.password,\n    );\n\n    if (!isPasswordValid) {\n      throw new HttpException('No user found', HttpStatus.NOT_FOUND);\n    }\n\n    this.userService.update(user.id, { lastLoginAt: new Date() });\n\n    const token = await this.helper.generateToken(user);\n\n    return { token };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateApartmentDto.html":{"url":"classes/CreateApartmentDto.html","title":"class - CreateApartmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateApartmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apartment/dto/create-apartment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                address\n                            \n                            \n                                    Readonly\n                                description\n                            \n                            \n                                    Readonly\n                                lat\n                            \n                            \n                                    Readonly\n                                lng\n                            \n                            \n                                    Readonly\n                                monthlyRent\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                rooms\n                            \n                            \n                                    Readonly\n                                securityDeposit\n                            \n                            \n                                    Readonly\n                                size\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Provide address'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/dto/create-apartment.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Provide description'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/dto/create-apartment.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        lat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Provide lat'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/dto/create-apartment.dto.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        lng\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Provide lng'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/dto/create-apartment.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        monthlyRent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsNotEmpty({message: 'Provide Monthly Rent'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/dto/create-apartment.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Please enter name'})@IsString()@MinLength(3)@MaxLength(20, {message: 'Name must be less than 20 characters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/dto/create-apartment.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        rooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Provide rooms'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/dto/create-apartment.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        securityDeposit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()@IsNotEmpty({message: 'Provide Security Deposit'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/dto/create-apartment.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty({message: 'Provide size'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/apartment/dto/create-apartment.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateApartmentDto {\n  @ApiProperty()\n  @IsNotEmpty({\n    message: 'Please enter name',\n  })\n  @IsString()\n  @MinLength(3)\n  @MaxLength(20, {\n    message: 'Name must be less than 20 characters',\n  })\n  readonly name: string;\n\n  @ApiProperty()\n  @IsNotEmpty({\n    message: 'Provide description',\n  })\n  @IsString()\n  readonly description: string;\n\n  @ApiProperty()\n  @IsNotEmpty({\n    message: 'Provide size',\n  })\n  @IsNumber()\n  readonly size: number;\n\n  @ApiProperty()\n  @IsNotEmpty({\n    message: 'Provide rooms',\n  })\n  @IsString()\n  readonly rooms: string;\n\n  @ApiProperty()\n  @IsNotEmpty({\n    message: 'Provide address',\n  })\n  @IsString()\n  readonly address: string;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsNotEmpty({\n    message: 'Provide Monthly Rent',\n  })\n  readonly monthlyRent: number;\n\n  @ApiProperty()\n  @IsNumber()\n  @IsNotEmpty({\n    message: 'Provide Security Deposit',\n  })\n  readonly securityDeposit: number;\n\n  @ApiProperty()\n  @IsNotEmpty({\n    message: 'Provide lat',\n  })\n  @IsNumber()\n  readonly lat: number;\n\n  @ApiProperty()\n  @IsNotEmpty({\n    message: 'Provide lng',\n  })\n  @IsNumber()\n  readonly lng: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatabaseConfig.html":{"url":"interfaces/DatabaseConfig.html","title":"interface - DatabaseConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DatabaseConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/database.config.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            database\n                                        \n                                \n                                \n                                        \n                                            host\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        database\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        database:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        host:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { registerAs } from '@nestjs/config';\n\nexport interface DatabaseConfig {\n  host: string;\n  port: number;\n  username: string;\n  password: string;\n  database: string;\n}\n\nexport default registerAs('db', () => ({\n  host: process.env.DATABASE_HOST,\n  port: parseInt(process.env.DATABASE_PORT, 10) || 5432,\n  username: process.env.DATABASE_USERNAME,\n  password: process.env.DATABASE_PASSWORD,\n  database: process.env.DATABASE,\n}));\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                api\n                            \n                            \n                                database\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        api\n                        \n                    \n                \n            \n            \n                \napi()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('api')@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        database\n                        \n                    \n                \n            \n            \n                \ndatabase()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('database')@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  HealthCheck,\n  TypeOrmHealthIndicator,\n} from '@nestjs/terminus';\nimport { Public } from 'src/public.decorator';\n\n@ApiTags('Health Status')\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private readonly health: HealthCheckService,\n    private readonly http: HttpHealthIndicator,\n    private readonly db: TypeOrmHealthIndicator,\n  ) {}\n\n  @Public()\n  @Get('api')\n  @HealthCheck()\n  api() {\n    return this.health.check([\n      () => this.http.pingCheck('Rentals API', 'http://localhost:6002'),\n    ]);\n  }\n\n  @Public()\n  @Get('database')\n  @HealthCheck()\n  database() {\n    return this.health.check([() => this.db.pingCheck('database')]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HealthController } from './health.controller';\nimport { HttpModule } from '@nestjs/axios';\n\n@Module({\n  imports: [TerminusModule, HttpModule],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                canActivate\n                            \n                            \n                                    Public\n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/user/jwt-auth.guard.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/user/jwt-auth.guard.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        handleRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRequest(err, user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/user/jwt-auth.guard.ts:36\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        UserEntity\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         UserEntity\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard, IAuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from 'src/public.decorator';\nimport UserContext from './models/user.context';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') implements IAuthGuard {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  public async canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n\n    // Add your custom authentication logic here\n    // for example, call super.logIn(request) to establish a session.\n    await super.canActivate(context);\n\n    const { user }: UserContext = context.switchToHttp().getRequest();\n\n    return user ? true : false;\n  }\n\n  public handleRequest(err: unknown, user: UserEntity): UserEntity {\n    // You can throw an exception based on either \"info\" or \"err\" arguments\n    if (err || !user) {\n      throw err || new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/user/jwt.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/user/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(@Inject(ConfigService) config: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: config.get('auth.secret'),\n    });\n  }\n\n  async validate(payload: any) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                email\n                            \n                            \n                                    Public\n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/login.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/login.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString } from 'class-validator';\n\nexport class LoginDto {\n  @IsEmail()\n  public readonly email: string;\n\n  @IsString()\n  public readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/register.dto.ts.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                email\n                            \n                            \n                                    Public\n                                    Readonly\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/register.dto.ts.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/register.dto.ts.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/register.dto.ts.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString } from 'class-validator';\n\nexport class RegisterDto {\n  @IsEmail()\n  public readonly email: string;\n\n  public readonly password: string;\n\n  @IsString()\n  public readonly name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateApartmentDto.html":{"url":"classes/UpdateApartmentDto.html","title":"class - UpdateApartmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateApartmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/apartment/dto/update-apartment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateApartmentDto } from './create-apartment.dto';\n\nexport class UpdateApartmentDto extends PartialType(CreateApartmentDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserContext.html":{"url":"interfaces/UserContext.html","title":"interface - UserContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/models/user.context.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         UserEntity\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserEntity\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { UserEntity } from '../entities/user.entity';\n\ninterface UserContext extends Request {\n  user: UserEntity;\n}\n\nexport default UserContext;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(req: UserContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                UserContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards, Req } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { JwtAuthGuard } from './jwt-auth.guard';\nimport UserContext from './models/user.context';\n\nimport { UserService } from './user.service';\n\n@ApiTags('user')\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  findOne(@Req() req: UserContext) {\n    return this.userService.findOne(req.user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserEntity.html":{"url":"entities/UserEntity.html","title":"entity - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                apartments\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                    Public\n                                interestedApartments\n                            \n                            \n                                    Public\n                                lastLoginAt\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        apartments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Apartment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, apartment => apartment.owner)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        interestedApartments\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApartmentUser[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, interestedUser => interestedUser.apartment)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        lastLoginAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { ApartmentUser } from 'src/apartment/entities/apartment-user.entity';\nimport { Apartment } from 'src/apartment/entities/apartment.entity';\nimport { Entity, PrimaryGeneratedColumn, Column, OneToMany } from 'typeorm';\n\n@Entity({\n  name: 'users',\n})\nexport class UserEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Exclude()\n  @Column()\n  password: string;\n\n  @Column({ type: 'timestamp', nullable: true, default: null })\n  public lastLoginAt: Date | null;\n\n  @OneToMany(() => Apartment, (apartment) => apartment.owner)\n  public apartments: Apartment[];\n\n  @OneToMany(() => ApartmentUser, (interestedUser) => interestedUser.apartment)\n  public interestedApartments!: ApartmentUser[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthHelper\n\nAuthHelper\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nAuthHelper->UserModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nUserModule -->\n\nAuthService->UserModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nUserModule -->\n\nJwtStrategy->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthHelper\n                        \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthController } from './auth.controller';\nimport { AuthHelper } from './auth.helper';\nimport { AuthService } from './auth.service';\nimport { UserEntity } from './entities/user.entity';\nimport { JwtStrategy } from './jwt.strategy';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserEntity]),\n    PassportModule.register({ defaultStrategy: 'jwt', property: 'user' }),\n    JwtModule.registerAsync({\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        secret: config.get('auth.secret'),\n        signOptions: { expiresIn: config.get('auth.expires') },\n      }),\n    }),\n  ],\n  providers: [UserService, AuthHelper, AuthService, JwtStrategy],\n  controllers: [AuthController, UserController],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { UserEntity } from './entities/user.entity';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly repository: Repository,\n  ) {}\n\n  public async create(user: UserEntity): Promise {\n    return await this.repository.save(user);\n  }\n\n  public async findOne(id: number): Promise {\n    return await this.repository.findOne({ where: { id } });\n  }\n\n  public async findByEmail(email: string): Promise {\n    return await this.repository.findOne({ where: { email } });\n  }\n\n  public async update(id: number, user: Partial): Promise {\n    await this.repository.update(id, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/apartment/apartment.controller.ts\n            \n            controller\n            ApartmentController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/apartment/apartment.controller.ts\n            \n            class\n            ApartmentResp\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/apartment/apartment.service.ts\n            \n            injectable\n            ApartmentService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/apartment/dto/create-apartment.dto.ts\n            \n            class\n            CreateApartmentDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/apartment/dto/update-apartment.dto.ts\n            \n            class\n            UpdateApartmentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/apartment/entities/apartment-user.entity.ts\n            \n            entity\n            ApartmentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/apartment/entities/apartment.entity.ts\n            \n            entity\n            Apartment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/config/app.config.ts\n            \n            interface\n            AppConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/config/auth.config.ts\n            \n            interface\n            AuthConfig\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/config/database.config.ts\n            \n            interface\n            DatabaseConfig\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/auth.helper.ts\n            \n            injectable\n            AuthHelper\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dto/register.dto.ts.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            entity\n            UserEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/models/user.context.ts\n            \n            interface\n            UserContext\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/axios : ^0.0.8\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.1.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.1\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @nestjs/terminus : ^8.0.6\n        \n            @nestjs/typeorm : ^8.1.2\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            joi : ^17.6.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.7.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.4.0\n        \n            typeorm : 0.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nRentals API\nDescription\n The API are built using Nest framework.\nInstallation\n$ yarn installEnvironment variables\n$ cp .env.example .envDocumentation\n$ yarn docsRunning the app\n# development\n$ yarn start\n\n# watch mode\n$ yarn start:dev\n\n# production mode\n$ yarn start:prodTest\n# unit tests\n$ yarn test\n\n# e2e tests\n$ yarn test:e2e\n\n# test coverage\n$ yarn test:covLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApartmentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApartmentModule\n\n\n\ncluster_ApartmentModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nApartmentService\n\nApartmentService\n\n\n\nApartmentModule\n\nApartmentModule\n\nApartmentModule -->\n\nApartmentService->ApartmentModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApartmentModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthHelper\n\nAuthHelper\n\nUserModule -->\n\nAuthHelper->UserModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nUserModule -->\n\nAuthService->UserModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nUserModule -->\n\nJwtStrategy->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
